{
    "meta": {
        "format": "1",
        "required plugins": [
            "Plugin"
        ]
    },
    "steps": {
        "cedar.dynamics.NeuralField": {
            "name": "Action-Attention-Field",
            "activation as output": "false",
            "discrete metric (workaround)": "true",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "5"
            ],
            "time scale": "100",
            "resting level": "-2.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "-1",
            "lateral kernels": {
                "cedar.aux.kernel.Gauss": {
                    "dimensionality": "1",
                    "anchor": [
                        "0"
                    ],
                    "amplitude": "1.1000000000000001",
                    "sigmas": [
                        "0.10000000000000001"
                    ],
                    "normalize": "true",
                    "shifts": [
                        "0"
                    ],
                    "limit": "5"
                }
            },
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Action-Change-Inhibition",
            "activation as output": "false",
            "discrete metric (workaround)": "true",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "5"
            ],
            "time scale": "1200",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Action-Introception-Field",
            "activation as output": "false",
            "discrete metric (workaround)": "true",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "5"
            ],
            "time scale": "100",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "-0.01",
            "lateral kernels": {
                "cedar.aux.kernel.Gauss": {
                    "dimensionality": "1",
                    "anchor": [
                        "0"
                    ],
                    "amplitude": "1",
                    "sigmas": [
                        "1"
                    ],
                    "normalize": "true",
                    "shifts": [
                        "0"
                    ],
                    "limit": "5"
                }
            },
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Action-Role-Field",
            "activation as output": "false",
            "discrete metric (workaround)": "true",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "5"
            ],
            "time scale": "100",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Action-Selection-Field",
            "activation as output": "false",
            "discrete metric (workaround)": "true",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "5"
            ],
            "time scale": "100",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "-1",
            "lateral kernels": {
                "cedar.aux.kernel.Gauss": {
                    "dimensionality": "1",
                    "anchor": [
                        "0"
                    ],
                    "amplitude": "1.1000000000000001",
                    "sigmas": [
                        "0.10000000000000001"
                    ],
                    "normalize": "true",
                    "shifts": [
                        "0"
                    ],
                    "limit": "5"
                }
            },
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Action-Working-Memory",
            "activation as output": "false",
            "discrete metric (workaround)": "true",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "5"
            ],
            "time scale": "100",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": {
                "cedar.aux.kernel.Gauss": {
                    "dimensionality": "1",
                    "anchor": [
                        "0"
                    ],
                    "amplitude": "1",
                    "sigmas": [
                        "0.10000000000000001"
                    ],
                    "normalize": "true",
                    "shifts": [
                        "0"
                    ],
                    "limit": "5"
                }
            },
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "ActionChange Detection",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Attention-Color-Binding-Field",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "2",
            "sizes": [
                "50",
                "52"
            ],
            "time scale": "100",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Cyclic",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "2",
                "anchor": [
                    "0",
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3",
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0",
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.processing.sources.Boost": {
            "name": "Belief-Boost",
            "strength": "1",
            "active": "true",
            "deactivate on reset": "false",
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Belief-Network-Node",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": {
                "cedar.aux.kernel.Box": {
                    "dimensionality": "1",
                    "anchor": [
                        "0"
                    ],
                    "amplitude": "1",
                    "widths": [
                        "1"
                    ]
                }
            },
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Belief-Node 1",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "0",
            "input noise gain": "0",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Belief-Node 2",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "0",
            "input noise gain": "0",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Belief-Node 3",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "0",
            "input noise gain": "0",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Belief-Node 4",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "0",
            "input noise gain": "0",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Belief-Node 5",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "0",
            "input noise gain": "0",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Belief-Node 6",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "0",
            "input noise gain": "0",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.processing.sources.TCPReader": {
            "name": "Camera TCP Reader",
            "buffer size": "32768",
            "port": "50020",
            "packet timeout (ms)": "500",
            "message timeout (ms)": "50",
            "accept interval (steps)": "30",
            "comments": ""
        },
        "cedar.processing.steps.ChannelSplit": {
            "name": "Channel Split",
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "CoS-Action1",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": {
                "cedar.aux.kernel.Box": {
                    "dimensionality": "1",
                    "anchor": [
                        "0"
                    ],
                    "amplitude": "1",
                    "widths": [
                        "5"
                    ]
                }
            },
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "CoS-Action2",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": {
                "cedar.aux.kernel.Box": {
                    "dimensionality": "1",
                    "anchor": [
                        "0"
                    ],
                    "amplitude": "1",
                    "widths": [
                        "5"
                    ]
                }
            },
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "CoS-Action3",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": {
                "cedar.aux.kernel.Box": {
                    "dimensionality": "1",
                    "anchor": [
                        "0"
                    ],
                    "amplitude": "1",
                    "widths": [
                        "5"
                    ]
                }
            },
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "CoS-Break",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "CoS-Color In Attention",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "CoS-Is In Front Of",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "CoS-Orient To Object",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.Preshape": {
            "name": "CoS1-Trace",
            "dimensionality": "0",
            "sizes": "",
            "time scale build up": "100",
            "time scale decay": "4000",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0.5",
                "beta": "1000"
            },
            "comments": ""
        },
        "cedar.dynamics.Preshape": {
            "name": "CoS2-Trace",
            "dimensionality": "0",
            "sizes": "",
            "time scale build up": "100",
            "time scale decay": "4000",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0.5",
                "beta": "1000"
            },
            "comments": ""
        },
        "cedar.dynamics.Preshape": {
            "name": "CoS3-Trace",
            "dimensionality": "0",
            "sizes": "",
            "time scale build up": "100",
            "time scale decay": "4000",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0.5",
                "beta": "1000"
            },
            "comments": ""
        },
        "cedar.processing.steps.ColorConversion": {
            "name": "Color Conversion",
            "source type": "BGR",
            "target type": "HSV",
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Color-Action-Field",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "50"
            ],
            "time scale": "100",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "-0.50000000000000022",
            "lateral kernels": {
                "cedar.aux.kernel.Gauss": {
                    "dimensionality": "1",
                    "anchor": [
                        "0"
                    ],
                    "amplitude": "1.5",
                    "sigmas": [
                        "1"
                    ],
                    "normalize": "true",
                    "shifts": [
                        "0"
                    ],
                    "limit": "5"
                }
            },
            "lateral kernel convolution": {
                "borderType": "Cyclic",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Color-Attention-Field",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "50"
            ],
            "time scale": "100",
            "resting level": "-2.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "-0.50000000000000022",
            "lateral kernels": {
                "cedar.aux.kernel.Gauss": {
                    "dimensionality": "1",
                    "anchor": [
                        "0"
                    ],
                    "amplitude": "1.5",
                    "sigmas": [
                        "1"
                    ],
                    "normalize": "true",
                    "shifts": [
                        "0"
                    ],
                    "limit": "5"
                }
            },
            "lateral kernel convolution": {
                "borderType": "Cyclic",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Color-Change-Detection",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "50"
            ],
            "time scale": "100",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Cyclic",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Color-Change-Inhibition",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "50"
            ],
            "time scale": "600",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Color-Role-Field",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "50"
            ],
            "time scale": "100",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Cyclic",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Color-Space-Perception",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "2",
            "sizes": [
                "50",
                "52"
            ],
            "time scale": "100",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "-0.0099999999999999967",
            "lateral kernels": {
                "cedar.aux.kernel.Gauss": {
                    "dimensionality": "2",
                    "anchor": [
                        "0",
                        "0"
                    ],
                    "amplitude": "1",
                    "sigmas": [
                        "1",
                        "1"
                    ],
                    "normalize": "true",
                    "shifts": [
                        "0",
                        "0"
                    ],
                    "limit": "5"
                }
            },
            "lateral kernel convolution": {
                "borderType": "Cyclic",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "2",
                "anchor": [
                    "0",
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3",
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0",
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Color-matching-Field",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "50"
            ],
            "time scale": "100",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Cyclic",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Commit Boost",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "50",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Commit-Node 1",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-1",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Commit-Node 2",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-1",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Commit-Node 3",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-1",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Commit-Node 4",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-1",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Commit-Node 5",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-1",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Commit-Node 6",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-1",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 10",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 11",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 12",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 13",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 14",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 15",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 16",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 17",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 18",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 19",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 2",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 20",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 21",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 22",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 23",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 24",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 25",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 26",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 27",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 28",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 29",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 3",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 30",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 31",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 32",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 4",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 5",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 6",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 7",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 8",
            "comments": ""
        },
        "cedar.processing.ComponentMultiply": {
            "name": "Component Multiply 9",
            "comments": ""
        },
        "cedar.processing.steps.Convolution": {
            "name": "Convolution",
            "kernels": "",
            "convolution": {
                "borderType": "Cyclic",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.FFTW"
                },
                "alternate even kernel center": "false"
            },
            "comments": ""
        },
        "cedar.processing.steps.Convolution": {
            "name": "Convolution 2",
            "kernels": "",
            "convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "comments": ""
        },
        "cedar.processing.sources.GaussInput": {
            "name": "Distance-Matching-Field",
            "dimensionality": "1",
            "sizes": [
                "52"
            ],
            "amplitude": "0.029999999999999999",
            "centers": [
                "26"
            ],
            "sigma": [
                "12"
            ],
            "cyclic": "false",
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Distance-matching-Field",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "52"
            ],
            "time scale": "100",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "-0.01",
            "lateral kernels": {
                "cedar.aux.kernel.Gauss": {
                    "dimensionality": "1",
                    "anchor": [
                        "0"
                    ],
                    "amplitude": "1",
                    "sigmas": [
                        "3"
                    ],
                    "normalize": "true",
                    "shifts": [
                        "0"
                    ],
                    "limit": "5"
                }
            },
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.processing.sources.Boost": {
            "name": "Exploration-Boost",
            "strength": "1",
            "active": "false",
            "deactivate on reset": "false",
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Exploration-Goal-Node",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.processing.sources.GaussInput": {
            "name": "Goal-Boost",
            "dimensionality": "1",
            "sizes": [
                "10"
            ],
            "amplitude": "1",
            "centers": [
                "2"
            ],
            "sigma": [
                "0.01"
            ],
            "cyclic": "false",
            "comments": ""
        },
        "cedar.processing.sources.Boost": {
            "name": "Goal-Directed-Mode",
            "strength": "1",
            "active": "false",
            "deactivate on reset": "false",
            "comments": ""
        },
        "cedar.processing.steps.HopfOscillatorRHS": {
            "name": "Hopf Oscillator RHS",
            "bank size": "1",
            "bank omega": "1",
            "bank alpha": "1",
            "bank gamma": "0.99999999999999989",
            "initialize on reset": "true",
            "shift u by radius fraction": "-0.0001",
            "comments": ""
        },
        "cedar.processing.steps.HopfOscillatorRHS": {
            "name": "Hopf Oscillator RHS 2",
            "bank size": "1",
            "bank omega": "1",
            "bank alpha": "1",
            "bank gamma": "0.99999999999999989",
            "initialize on reset": "true",
            "shift u by radius fraction": "-0.0001",
            "comments": ""
        },
        "cedar.processing.steps.HopfOscillatorRHS": {
            "name": "Hopf Oscillator RHS 3",
            "bank size": "1",
            "bank omega": "1",
            "bank alpha": "1",
            "bank gamma": "1.0000000000000002",
            "initialize on reset": "true",
            "shift u by radius fraction": "-0.0001",
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Intention In Action-Action1",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Intention In Action-Action2",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Intention In Action-Break",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Intention In Action-Orient To Object",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Intention-In-Action-Node6",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.processing.steps.MatrixTypeConverter": {
            "name": "Matrix Type Converter",
            "target type": "Float",
            "comments": ""
        },
        "cedar.processing.sources.TCPReader": {
            "name": "Microphone TCP Reader",
            "buffer size": "32768",
            "port": "50021",
            "packet timeout (ms)": "500",
            "message timeout (ms)": "50",
            "accept interval (steps)": "30",
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Motor-Attractor",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "52"
            ],
            "time scale": "100",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "-0.01",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.processing.Norm": {
            "name": "Norm",
            "comments": ""
        },
        "cedar.processing.Norm": {
            "name": "Norm 2",
            "comments": ""
        },
        "cedar.processing.Norm": {
            "name": "Norm 3",
            "comments": ""
        },
        "cedar.processing.steps.NumericalIntegration": {
            "name": "Numerical Integration",
            "initialize on reset": "true",
            "use BDF5": "false",
            "comments": ""
        },
        "cedar.processing.steps.NumericalIntegration": {
            "name": "Numerical Integration 2",
            "initialize on reset": "true",
            "use BDF5": "false",
            "comments": ""
        },
        "cedar.processing.steps.NumericalIntegration": {
            "name": "Numerical Integration 3",
            "initialize on reset": "true",
            "use BDF5": "false",
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Precondition-Break In Front Of Object",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Precondition-Color In Attention",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Precondition-Is In Front Of",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Precondition-Oriented To Object",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "100",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.processing.Projection": {
            "name": "Projection",
            "dimension mapping": {
                "0": "4294967295",
                "1": "1",
                "2": "0"
            },
            "output dimensionality": "2",
            "output dimension sizes": [
                "50",
                "52"
            ],
            "compression type": "SUM",
            "comments": ""
        },
        "cedar.processing.Projection": {
            "name": "Projection 10",
            "dimension mapping": {
                "0": "4294967295"
            },
            "output dimensionality": "0",
            "output dimension sizes": "",
            "compression type": "MAXIMUM",
            "comments": ""
        },
        "cedar.processing.Projection": {
            "name": "Projection 11",
            "dimension mapping": {
                "0": "4294967295"
            },
            "output dimensionality": "0",
            "output dimension sizes": "",
            "compression type": "MAXIMUM",
            "comments": ""
        },
        "cedar.processing.Projection": {
            "name": "Projection 12",
            "dimension mapping": {
                "0": "4294967295"
            },
            "output dimensionality": "0",
            "output dimension sizes": "",
            "compression type": "MAXIMUM",
            "comments": ""
        },
        "cedar.processing.Projection": {
            "name": "Projection 13",
            "dimension mapping": {
                "0": "4294967295"
            },
            "output dimensionality": "0",
            "output dimension sizes": "",
            "compression type": "MAXIMUM",
            "comments": ""
        },
        "cedar.processing.Projection": {
            "name": "Projection 14",
            "dimension mapping": {
                "0": "4294967295"
            },
            "output dimensionality": "0",
            "output dimension sizes": "",
            "compression type": "MAXIMUM",
            "comments": ""
        },
        "cedar.processing.Projection": {
            "name": "Projection 2",
            "dimension mapping": {
                "0": "0",
                "1": "4294967295"
            },
            "output dimensionality": "1",
            "output dimension sizes": [
                "50"
            ],
            "compression type": "AVERAGE",
            "comments": ""
        },
        "cedar.processing.Projection": {
            "name": "Projection 3",
            "dimension mapping": {
                "0": "4294967295"
            },
            "output dimensionality": "0",
            "output dimension sizes": "",
            "compression type": "MAXIMUM",
            "comments": ""
        },
        "cedar.processing.Projection": {
            "name": "Projection 4",
            "dimension mapping": {
                "0": "4294967295"
            },
            "output dimensionality": "0",
            "output dimension sizes": "",
            "compression type": "MAXIMUM",
            "comments": ""
        },
        "cedar.processing.Projection": {
            "name": "Projection 5",
            "dimension mapping": {
                "0": "4294967295"
            },
            "output dimensionality": "0",
            "output dimension sizes": "",
            "compression type": "MAXIMUM",
            "comments": ""
        },
        "cedar.processing.Projection": {
            "name": "Projection 6",
            "dimension mapping": {
                "0": "4294967295"
            },
            "output dimensionality": "0",
            "output dimension sizes": "",
            "compression type": "MAXIMUM",
            "comments": ""
        },
        "cedar.processing.Projection": {
            "name": "Projection 7",
            "dimension mapping": {
                "0": "0"
            },
            "output dimensionality": "2",
            "output dimension sizes": [
                "50",
                "52"
            ],
            "compression type": "MAXIMUM",
            "comments": ""
        },
        "cedar.processing.Projection": {
            "name": "Projection 8",
            "dimension mapping": {
                "0": "4294967295",
                "1": "0"
            },
            "output dimensionality": "1",
            "output dimension sizes": [
                "52"
            ],
            "compression type": "MAXIMUM",
            "comments": ""
        },
        "cedar.processing.Projection": {
            "name": "Projection 9",
            "dimension mapping": {
                "0": "4294967295"
            },
            "output dimensionality": "0",
            "output dimension sizes": "",
            "compression type": "MAXIMUM",
            "comments": ""
        },
        "cedar.dynamics.RateMatrixToSpaceCode": {
            "name": "Rate Matrix To Space Code",
            "number of bins": "50",
            "lower limit": "0",
            "upper limit": "255",
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Recruitment Boost",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "300",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace",
            "association dimension": "0",
            "association sizes": "",
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": "",
            "weight sigmas": "",
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 10",
            "association dimension": "1",
            "association sizes": [
                "5"
            ],
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": [
                "3"
            ],
            "weight sigmas": [
                "3"
            ],
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 11",
            "association dimension": "1",
            "association sizes": [
                "10"
            ],
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": [
                "3"
            ],
            "weight sigmas": [
                "3"
            ],
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 12",
            "association dimension": "1",
            "association sizes": [
                "5"
            ],
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": [
                "3"
            ],
            "weight sigmas": [
                "3"
            ],
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 13",
            "association dimension": "1",
            "association sizes": [
                "50"
            ],
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": [
                "3"
            ],
            "weight sigmas": [
                "3"
            ],
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 14",
            "association dimension": "1",
            "association sizes": [
                "5"
            ],
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": [
                "3"
            ],
            "weight sigmas": [
                "3"
            ],
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 15",
            "association dimension": "1",
            "association sizes": [
                "50"
            ],
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": [
                "3"
            ],
            "weight sigmas": [
                "3"
            ],
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 16",
            "association dimension": "1",
            "association sizes": [
                "50"
            ],
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": [
                "3"
            ],
            "weight sigmas": [
                "3"
            ],
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 17",
            "association dimension": "1",
            "association sizes": [
                "5"
            ],
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": [
                "3"
            ],
            "weight sigmas": [
                "3"
            ],
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 18",
            "association dimension": "1",
            "association sizes": [
                "10"
            ],
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": [
                "3"
            ],
            "weight sigmas": [
                "3"
            ],
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 19",
            "association dimension": "1",
            "association sizes": [
                "50"
            ],
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": [
                "3"
            ],
            "weight sigmas": [
                "3"
            ],
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 2",
            "association dimension": "1",
            "association sizes": [
                "10"
            ],
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": [
                "3"
            ],
            "weight sigmas": [
                "3"
            ],
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 20",
            "association dimension": "0",
            "association sizes": "",
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": "",
            "weight sigmas": "",
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 21",
            "association dimension": "0",
            "association sizes": "",
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": "",
            "weight sigmas": "",
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 22",
            "association dimension": "0",
            "association sizes": "",
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": "",
            "weight sigmas": "",
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 23",
            "association dimension": "0",
            "association sizes": "",
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": "",
            "weight sigmas": "",
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 24",
            "association dimension": "0",
            "association sizes": "",
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": "",
            "weight sigmas": "",
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 3",
            "association dimension": "1",
            "association sizes": [
                "5"
            ],
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": [
                "3"
            ],
            "weight sigmas": [
                "3"
            ],
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 4",
            "association dimension": "1",
            "association sizes": [
                "50"
            ],
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": [
                "3"
            ],
            "weight sigmas": [
                "3"
            ],
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 5",
            "association dimension": "1",
            "association sizes": [
                "10"
            ],
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": [
                "3"
            ],
            "weight sigmas": [
                "3"
            ],
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 6",
            "association dimension": "1",
            "association sizes": [
                "5"
            ],
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": [
                "3"
            ],
            "weight sigmas": [
                "3"
            ],
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 7",
            "association dimension": "1",
            "association sizes": [
                "50"
            ],
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": [
                "3"
            ],
            "weight sigmas": [
                "3"
            ],
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 8",
            "association dimension": "1",
            "association sizes": [
                "10"
            ],
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": [
                "3"
            ],
            "weight sigmas": [
                "3"
            ],
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.proc.steps.RewardHebbTrace": {
            "name": "Reward Hebb Trace 9",
            "association dimension": "1",
            "association sizes": [
                "10"
            ],
            "learning rate": "0.90000000000000002",
            "fixed reward duration": "false",
            "reward duration": "200",
            "manual weights": "false",
            "weight centers": [
                "3"
            ],
            "weight sigmas": [
                "3"
            ],
            "weight amplitude": "6",
            "reward threshold": "0.5",
            "reciprocal weight threshold": "0.5",
            "require asso and trigger for learning": "false",
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Reward-Node",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "0",
            "sizes": "",
            "time scale": "300",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.processing.ScalarsToVector": {
            "name": "Scalars To Vector",
            "number of vector entries": "3",
            "comments": ""
        },
        "cedar.processing.ScalarsToVector": {
            "name": "Scalars To Vector 2",
            "number of vector entries": "5",
            "comments": ""
        },
        "cedar.processing.ScalarsToVector": {
            "name": "Scalars To Vector 3",
            "number of vector entries": "5",
            "comments": ""
        },
        "cedar.processing.ScalarsToVector": {
            "name": "Scalars To Vector 4",
            "number of vector entries": "5",
            "comments": ""
        },
        "cedar.processing.ScalarsToVector": {
            "name": "Scalars To Vector 5",
            "number of vector entries": "5",
            "comments": ""
        },
        "cedar.processing.ScalarsToVector": {
            "name": "Scalars To Vector 6",
            "number of vector entries": "5",
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Sound-Action-Field",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "10"
            ],
            "time scale": "100",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "-0.5",
            "lateral kernels": {
                "cedar.aux.kernel.Gauss": {
                    "dimensionality": "1",
                    "anchor": [
                        "0"
                    ],
                    "amplitude": "1.1000000000000001",
                    "sigmas": [
                        "1"
                    ],
                    "normalize": "true",
                    "shifts": [
                        "0"
                    ],
                    "limit": "5"
                }
            },
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Sound-Attention-Field",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "10"
            ],
            "time scale": "100",
            "resting level": "-2.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "-0.49999999999999978",
            "lateral kernels": {
                "cedar.aux.kernel.Gauss": {
                    "dimensionality": "1",
                    "anchor": [
                        "0"
                    ],
                    "amplitude": "1.1000000000000001",
                    "sigmas": [
                        "1"
                    ],
                    "normalize": "true",
                    "shifts": [
                        "0"
                    ],
                    "limit": "5"
                }
            },
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Sound-Change-Detection",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "10"
            ],
            "time scale": "100",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Sound-Change-Inhibition",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "10"
            ],
            "time scale": "6000",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Sound-Goal-Field",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "10"
            ],
            "time scale": "100",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "-0.01",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Sound-Perception",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "10"
            ],
            "time scale": "100",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "-0.01",
            "lateral kernels": {
                "cedar.aux.kernel.Gauss": {
                    "dimensionality": "1",
                    "anchor": [
                        "0"
                    ],
                    "amplitude": "1",
                    "sigmas": [
                        "1"
                    ],
                    "normalize": "true",
                    "shifts": [
                        "0"
                    ],
                    "limit": "5"
                }
            },
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Sound-Role-Field",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "10"
            ],
            "time scale": "100",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.SpaceToRateCode": {
            "name": "Space To Rate Code",
            "tau": "0.1 s",
            "lowerLimit": "0",
            "upperLimit": "52",
            "jump to fixed point": "false",
            "use cyclic mean": "false",
            "comments": ""
        },
        "cedar.processing.sources.GaussInput": {
            "name": "Space-Action-Field",
            "dimensionality": "1",
            "sizes": [
                "52"
            ],
            "amplitude": "1",
            "centers": [
                "26"
            ],
            "sigma": [
                "2"
            ],
            "cyclic": "false",
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Space-Attention-Field",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "52"
            ],
            "time scale": "100",
            "resting level": "-0.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.dynamics.NeuralField": {
            "name": "Space-matching-Field",
            "activation as output": "false",
            "discrete metric (workaround)": "false",
            "update stepIcon according to output": "true",
            "threshold for updating the stepIcon": "0.80000000000000004",
            "dimensionality": "1",
            "sizes": [
                "52"
            ],
            "time scale": "100",
            "resting level": "-1.75",
            "input noise gain": "0.10000000000000001",
            "multiplicative noise (input)": "false",
            "multiplicative noise (activation)": "false",
            "sigmoid": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0",
                "beta": "100"
            },
            "global inhibition": "0",
            "lateral kernels": "",
            "lateral kernel convolution": {
                "borderType": "Zero",
                "mode": "Same",
                "engine": {
                    "type": "cedar.aux.conv.OpenCV"
                },
                "alternate even kernel center": "false"
            },
            "noise correlation kernel": {
                "dimensionality": "1",
                "anchor": [
                    "0"
                ],
                "amplitude": "0",
                "sigmas": [
                    "3"
                ],
                "normalize": "true",
                "shifts": [
                    "0"
                ],
                "limit": "5"
            },
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain",
            "gain factor": "0.002",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 10",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 11",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 12",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 13",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 14",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 15",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 16",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 17",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 18",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 19",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 2",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 20",
            "gain factor": "-5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 21",
            "gain factor": "-5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 22",
            "gain factor": "-5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 23",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 24",
            "gain factor": "-1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 25",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 26",
            "gain factor": "-1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 27",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 28",
            "gain factor": "-1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 29",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 3",
            "gain factor": "-1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 30",
            "gain factor": "-1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 31",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 32",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 33",
            "gain factor": "-1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 34",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 35",
            "gain factor": "1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 36",
            "gain factor": "1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 37",
            "gain factor": "1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 38",
            "gain factor": "1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 39",
            "gain factor": "1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 4",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 40",
            "gain factor": "1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 41",
            "gain factor": "1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 42",
            "gain factor": "1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 43",
            "gain factor": "1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 44",
            "gain factor": "1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 45",
            "gain factor": "1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 46",
            "gain factor": "1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 47",
            "gain factor": "1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 48",
            "gain factor": "1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 49",
            "gain factor": "1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 5",
            "gain factor": "2",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 50",
            "gain factor": "1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 51",
            "gain factor": "1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 52",
            "gain factor": "1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 53",
            "gain factor": "0.29999999999999999",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 54",
            "gain factor": "0.29999999999999999",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 55",
            "gain factor": "0.29999999999999999",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 56",
            "gain factor": "0.29999999999999999",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 57",
            "gain factor": "0.29999999999999999",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 58",
            "gain factor": "0.29999999999999999",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 59",
            "gain factor": "0.80000000000000004",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 6",
            "gain factor": "2",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 60",
            "gain factor": "2",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 61",
            "gain factor": "0.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 62",
            "gain factor": "0.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 63",
            "gain factor": "0.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 64",
            "gain factor": "0.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 65",
            "gain factor": "0.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 66",
            "gain factor": "0.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 67",
            "gain factor": "1.5",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 68",
            "gain factor": "2",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 7",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 8",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.StaticGain": {
            "name": "Static Gain 9",
            "gain factor": "-1",
            "comments": ""
        },
        "cedar.processing.sinks.TCPWriter": {
            "name": "TCP-Break-Writer",
            "port": "50031",
            "ip_adress": "134.147.176.105",
            "timeout (ms)": "3000",
            "max timeouts": "50",
            "send interval (timesteps)": "1",
            "comments": ""
        },
        "cedar.processing.sinks.TCPWriter": {
            "name": "TCP-LED-Writer",
            "port": "50032",
            "ip_adress": "134.147.176.105",
            "timeout (ms)": "3000",
            "max timeouts": "50",
            "send interval (timesteps)": "1",
            "comments": ""
        },
        "cedar.processing.sinks.TCPWriter": {
            "name": "TCP-Motor-Writer",
            "port": "50030",
            "ip_adress": "134.147.176.105",
            "timeout (ms)": "3000",
            "max timeouts": "50",
            "send interval (timesteps)": "1",
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function",
            "function": {
                "type": "cedar.aux.math.AbsSigmoid",
                "threshold": "0.050000000000000003",
                "beta": "100"
            },
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function 10",
            "function": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0.90000000000000002"
            },
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function 11",
            "function": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0.90000000000000002"
            },
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function 12",
            "function": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0.90000000000000002"
            },
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function 14",
            "function": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0.90000000000000002"
            },
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function 15",
            "function": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0.90000000000000002"
            },
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function 16",
            "function": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0.90000000000000002"
            },
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function 18",
            "function": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0.90000000000000002"
            },
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function 19",
            "function": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0.90000000000000002"
            },
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function 20",
            "function": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0.90000000000000002"
            },
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function 22",
            "function": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0.90000000000000002"
            },
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function 23",
            "function": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0.90000000000000002"
            },
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function 24",
            "function": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0.90000000000000002"
            },
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function 26",
            "function": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0.90000000000000002"
            },
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function 27",
            "function": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0.90000000000000002"
            },
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function 28",
            "function": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0.90000000000000002"
            },
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function 3",
            "function": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "4"
            },
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function 7",
            "function": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0.90000000000000002"
            },
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function 8",
            "function": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0.90000000000000002"
            },
            "comments": ""
        },
        "cedar.processing.TransferFunction": {
            "name": "Transfer Function 9",
            "function": {
                "type": "cedar.aux.math.HeavisideSigmoid",
                "threshold": "0.90000000000000002"
            },
            "comments": ""
        },
        "cedar.processing.VectorToScalars": {
            "name": "Vector To Scalars",
            "number of vector entries": "5",
            "comments": ""
        },
        "cedar.processing.ConstVector": {
            "name": "dx",
            "number of vector entries": "1",
            "entries": [
                "0.5"
            ],
            "comments": ""
        },
        "cedar.processing.ConstVector": {
            "name": "j",
            "number of vector entries": "1",
            "entries": [
                "3"
            ],
            "comments": ""
        },
        "cedar.processing.steps.Sum": {
            "name": "k",
            "comments": ""
        },
        "cedar.processing.steps.Sum": {
            "name": "sum",
            "comments": ""
        },
        "cedar.processing.ConstVector": {
            "name": "x",
            "number of vector entries": "1",
            "entries": [
                "2"
            ],
            "comments": ""
        }
    },
    "triggers": {
        "cedar.processing.LoopedTrigger": {
            "name": "default thread",
            "step size": "0.02 s",
            "fake Euler step size": "0.02 s",
            "minimum sleep time": "0.0002 s",
            "idle time": "1e-05 s",
            "simulated time": "0.001 s",
            "loop mode": "real deltaT",
            "start with all": "true",
            "listeners": [
                "Belief-Node 1",
                "Exploration-Goal-Node",
                "Sound-Goal-Field",
                "CoS-Color In Attention",
                "Precondition-Color In Attention",
                "Intention In Action-Orient To Object",
                "CoS-Orient To Object",
                "Precondition-Oriented To Object",
                "CoS-Is In Front Of",
                "Precondition-Is In Front Of",
                "Intention In Action-Action1",
                "CoS-Action1",
                "Color-matching-Field",
                "Attention-Color-Binding-Field",
                "Space-Attention-Field",
                "Space-matching-Field",
                "Distance-matching-Field",
                "Camera TCP Reader",
                "Microphone TCP Reader",
                "Color-Space-Perception",
                "Sound-Perception",
                "Color-Attention-Field",
                "Sound-Attention-Field",
                "Action-Introception-Field",
                "Action-Attention-Field",
                "Sound-Action-Field",
                "Color-Action-Field",
                "Action-Selection-Field",
                "TCP-Motor-Writer",
                "TCP-Break-Writer",
                "CoS-Action2",
                "Intention In Action-Action2",
                "CoS-Action3",
                "Intention-In-Action-Node6",
                "TCP-LED-Writer",
                "Space To Rate Code",
                "Intention In Action-Break",
                "CoS-Break",
                "Precondition-Break In Front Of Object",
                "Numerical Integration",
                "Numerical Integration 2",
                "Numerical Integration 3",
                "Motor-Attractor",
                "Action-Working-Memory",
                "ActionChange Detection",
                "Sound-Change-Detection",
                "CoS1-Trace",
                "CoS2-Trace",
                "CoS3-Trace",
                "Color-Change-Detection",
                "Color-Change-Inhibition",
                "Sound-Change-Inhibition",
                "Action-Change-Inhibition",
                "Belief-Node 2",
                "Commit-Node 2",
                "Commit-Node 1",
                "Belief-Network-Node",
                "Color-Role-Field",
                "Sound-Role-Field",
                "Action-Role-Field",
                "Belief-Node 3",
                "Reward Hebb Trace 7",
                "Reward Hebb Trace 8",
                "Commit-Node 3",
                "Reward Hebb Trace 10",
                "Reward Hebb Trace 11",
                "Reward Hebb Trace 12",
                "Belief-Node 4",
                "Reward Hebb Trace 13",
                "Commit-Node 4",
                "Reward Hebb Trace 9",
                "Reward Hebb Trace 14",
                "Commit-Node 5",
                "Belief-Node 5",
                "Reward Hebb Trace 15",
                "Commit-Node 6",
                "Belief-Node 6",
                "Reward Hebb Trace 16",
                "Reward Hebb Trace 17",
                "Reward Hebb Trace 18",
                "Reward Hebb Trace 6",
                "Reward Hebb Trace 19",
                "Reward Hebb Trace 2",
                "Reward Hebb Trace 3",
                "Recruitment Boost",
                "Commit Boost",
                "Reward-Node",
                "Reward Hebb Trace 20",
                "Reward Hebb Trace 21",
                "Reward Hebb Trace 22",
                "Reward Hebb Trace 23",
                "Reward Hebb Trace 24",
                "Reward Hebb Trace",
                "Reward Hebb Trace 4",
                "Reward Hebb Trace 5"
            ]
        }
    },
    "connections": [
        {
            "source": "Rate Matrix To Space Code.output",
            "target": "Static Gain.input"
        },
        {
            "source": "Static Gain.output",
            "target": "Convolution.matrix"
        },
        {
            "source": "Color Conversion.converted image",
            "target": "Matrix Type Converter.matrix"
        },
        {
            "source": "Matrix Type Converter.converted matrix",
            "target": "Channel Split.three channel input"
        },
        {
            "source": "Channel Split.channel 1",
            "target": "Rate Matrix To Space Code.bin map"
        },
        {
            "source": "Channel Split.channel 2",
            "target": "Rate Matrix To Space Code.values"
        },
        {
            "source": "Camera TCP Reader.output",
            "target": "Color Conversion.input image"
        },
        {
            "source": "Color-Space-Perception.sigmoided activation",
            "target": "Projection 2.input"
        },
        {
            "source": "Convolution.result",
            "target": "Projection.input"
        },
        {
            "source": "Goal-Boost.Gauss input",
            "target": "Sound-Goal-Field.input"
        },
        {
            "source": "Goal-Directed-Mode.boost",
            "target": "Sound-Goal-Field.input"
        },
        {
            "source": "Exploration-Goal-Node.sigmoided activation",
            "target": "Color-Attention-Field.input"
        },
        {
            "source": "Exploration-Goal-Node.sigmoided activation",
            "target": "Sound-Attention-Field.input"
        },
        {
            "source": "Exploration-Boost.boost",
            "target": "Exploration-Goal-Node.input"
        },
        {
            "source": "Color-Attention-Field.sigmoided activation",
            "target": "Color-Action-Field.input"
        },
        {
            "source": "Sound-Attention-Field.sigmoided activation",
            "target": "Sound-Action-Field.input"
        },
        {
            "source": "Action-Attention-Field.sigmoided activation",
            "target": "Action-Selection-Field.input"
        },
        {
            "source": "Sound-Action-Field.sigmoided activation",
            "target": "Sound-Attention-Field.input"
        },
        {
            "source": "Action-Selection-Field.sigmoided activation",
            "target": "Action-Attention-Field.input"
        },
        {
            "source": "Exploration-Goal-Node.sigmoided activation",
            "target": "Sound-Action-Field.input"
        },
        {
            "source": "Exploration-Goal-Node.sigmoided activation",
            "target": "Color-Action-Field.input"
        },
        {
            "source": "Sound-Perception.sigmoided activation",
            "target": "Static Gain 5.input"
        },
        {
            "source": "Static Gain 5.output",
            "target": "Sound-Attention-Field.input"
        },
        {
            "source": "Action-Introception-Field.sigmoided activation",
            "target": "Static Gain 6.input"
        },
        {
            "source": "Static Gain 6.output",
            "target": "Action-Attention-Field.input"
        },
        {
            "source": "Color-matching-Field.sigmoided activation",
            "target": "Projection 6.input"
        },
        {
            "source": "Projection 6.output",
            "target": "CoS-Color In Attention.input"
        },
        {
            "source": "CoS-Color In Attention.sigmoided activation",
            "target": "Static Gain 9.input"
        },
        {
            "source": "Precondition-Color In Attention.sigmoided activation",
            "target": "Static Gain 10.input"
        },
        {
            "source": "Static Gain 10.output",
            "target": "Intention In Action-Orient To Object.input"
        },
        {
            "source": "Projection 7.output",
            "target": "Attention-Color-Binding-Field.input"
        },
        {
            "source": "Attention-Color-Binding-Field.sigmoided activation",
            "target": "Projection 8.input"
        },
        {
            "source": "Projection 8.output",
            "target": "Space-Attention-Field.input"
        },
        {
            "source": "Space-Action-Field.Gauss input",
            "target": "Space-matching-Field.input"
        },
        {
            "source": "Space-Attention-Field.sigmoided activation",
            "target": "Space-matching-Field.input"
        },
        {
            "source": "Space-matching-Field.sigmoided activation",
            "target": "Projection 9.input"
        },
        {
            "source": "Projection 9.output",
            "target": "CoS-Orient To Object.input"
        },
        {
            "source": "CoS-Orient To Object.sigmoided activation",
            "target": "Static Gain 11.input"
        },
        {
            "source": "Distance-matching-Field.sigmoided activation",
            "target": "Projection 10.input"
        },
        {
            "source": "Projection 10.output",
            "target": "CoS-Is In Front Of.input"
        },
        {
            "source": "CoS-Is In Front Of.sigmoided activation",
            "target": "Static Gain 13.input"
        },
        {
            "source": "Precondition-Is In Front Of.sigmoided activation",
            "target": "Static Gain 14.input"
        },
        {
            "source": "Space To Rate Code.output",
            "target": "TCP-Motor-Writer.input"
        },
        {
            "source": "Convolution 2.result",
            "target": "Distance-matching-Field.input"
        },
        {
            "source": "Projection.output",
            "target": "Transfer Function 3.input"
        },
        {
            "source": "Exploration-Goal-Node.sigmoided activation",
            "target": "Action-Selection-Field.input"
        },
        {
            "source": "Static Gain 11.output",
            "target": "Intention In Action-Orient To Object.input"
        },
        {
            "source": "CoS-Action2.sigmoided activation",
            "target": "Static Gain 8.input"
        },
        {
            "source": "CoS-Action3.sigmoided activation",
            "target": "Static Gain 15.input"
        },
        {
            "source": "Static Gain 8.output",
            "target": "Intention In Action-Action2.input"
        },
        {
            "source": "Static Gain 15.output",
            "target": "Intention-In-Action-Node6.input"
        },
        {
            "source": "Static Gain 13.output",
            "target": "Precondition-Is In Front Of.input"
        },
        {
            "source": "Precondition-Oriented To Object.sigmoided activation",
            "target": "Static Gain 12.input"
        },
        {
            "source": "Static Gain 12.output",
            "target": "CoS-Is In Front Of.input"
        },
        {
            "source": "Static Gain 11.output",
            "target": "Precondition-Oriented To Object.input"
        },
        {
            "source": "Static Gain 9.output",
            "target": "Precondition-Color In Attention.input"
        },
        {
            "source": "Static Gain 14.output",
            "target": "Intention In Action-Break.input"
        },
        {
            "source": "Intention In Action-Break.sigmoided activation",
            "target": "TCP-Break-Writer.input"
        },
        {
            "source": "Intention In Action-Break.sigmoided activation",
            "target": "CoS-Break.input"
        },
        {
            "source": "CoS-Break.sigmoided activation",
            "target": "Static Gain 16.input"
        },
        {
            "source": "Static Gain 16.output",
            "target": "Precondition-Break In Front Of Object.input"
        },
        {
            "source": "Precondition-Break In Front Of Object.sigmoided activation",
            "target": "Static Gain 17.input"
        },
        {
            "source": "Static Gain 17.output",
            "target": "Intention In Action-Action1.input"
        },
        {
            "source": "Distance-Matching-Field.Gauss input",
            "target": "Convolution 2.kernel"
        },
        {
            "source": "Space-Attention-Field.sigmoided activation",
            "target": "Convolution 2.matrix"
        },
        {
            "source": "Static Gain 17.output",
            "target": "Intention In Action-Action2.input"
        },
        {
            "source": "Static Gain 17.output",
            "target": "Intention-In-Action-Node6.input"
        },
        {
            "source": "Hopf Oscillator RHS.state change",
            "target": "Numerical Integration.input"
        },
        {
            "source": "Numerical Integration.integration result",
            "target": "Hopf Oscillator RHS.state"
        },
        {
            "source": "Intention In Action-Action1.sigmoided activation",
            "target": "Hopf Oscillator RHS.alphas (bank) (optional)"
        },
        {
            "source": "Numerical Integration.integration result",
            "target": "Norm.input"
        },
        {
            "source": "Norm.output",
            "target": "CoS-Action1.input"
        },
        {
            "source": "Intention In Action-Action1.sigmoided activation",
            "target": "Hopf Oscillator RHS.omegas (bank) (optional)"
        },
        {
            "source": "Intention In Action-Action2.sigmoided activation",
            "target": "Hopf Oscillator RHS 2.omegas (bank) (optional)"
        },
        {
            "source": "Intention In Action-Action2.sigmoided activation",
            "target": "Hopf Oscillator RHS 2.alphas (bank) (optional)"
        },
        {
            "source": "Hopf Oscillator RHS 2.state change",
            "target": "Numerical Integration 2.input"
        },
        {
            "source": "Numerical Integration 2.integration result",
            "target": "Hopf Oscillator RHS 2.state"
        },
        {
            "source": "Hopf Oscillator RHS 3.state change",
            "target": "Numerical Integration 3.input"
        },
        {
            "source": "Numerical Integration 3.integration result",
            "target": "Hopf Oscillator RHS 3.state"
        },
        {
            "source": "Intention-In-Action-Node6.sigmoided activation",
            "target": "Hopf Oscillator RHS 3.omegas (bank) (optional)"
        },
        {
            "source": "Intention-In-Action-Node6.sigmoided activation",
            "target": "Hopf Oscillator RHS 3.alphas (bank) (optional)"
        },
        {
            "source": "Numerical Integration 2.integration result",
            "target": "Norm 3.input"
        },
        {
            "source": "Numerical Integration 3.integration result",
            "target": "Norm 2.input"
        },
        {
            "source": "Norm 2.output",
            "target": "CoS-Action3.input"
        },
        {
            "source": "Norm 3.output",
            "target": "CoS-Action2.input"
        },
        {
            "source": "Norm.output",
            "target": "Scalars To Vector.scalar 0"
        },
        {
            "source": "Norm 3.output",
            "target": "Scalars To Vector.scalar 1"
        },
        {
            "source": "Norm 2.output",
            "target": "Scalars To Vector.scalar 2"
        },
        {
            "source": "Scalars To Vector.vector",
            "target": "TCP-LED-Writer.input"
        },
        {
            "source": "Color-Attention-Field.sigmoided activation",
            "target": "Color-matching-Field.input"
        },
        {
            "source": "Space-Attention-Field.sigmoided activation",
            "target": "Motor-Attractor.input"
        },
        {
            "source": "Intention In Action-Orient To Object.sigmoided activation",
            "target": "Motor-Attractor.input"
        },
        {
            "source": "Motor-Attractor.sigmoided activation",
            "target": "Space To Rate Code.input"
        },
        {
            "source": "Action-Selection-Field.sigmoided activation",
            "target": "Vector To Scalars.input vector"
        },
        {
            "source": "Exploration-Goal-Node.sigmoided activation",
            "target": "Scalars To Vector 2.scalar 4"
        },
        {
            "source": "Exploration-Goal-Node.sigmoided activation",
            "target": "Scalars To Vector 2.scalar 3"
        },
        {
            "source": "Exploration-Goal-Node.sigmoided activation",
            "target": "Scalars To Vector 2.scalar 2"
        },
        {
            "source": "Scalars To Vector 2.vector",
            "target": "Action-Selection-Field.input"
        },
        {
            "source": "Color-Action-Field.sigmoided activation",
            "target": "Color-matching-Field.input"
        },
        {
            "source": "Intention In Action-Orient To Object.sigmoided activation",
            "target": "Scalars To Vector 3.scalar 0"
        },
        {
            "source": "Intention In Action-Break.sigmoided activation",
            "target": "Scalars To Vector 3.scalar 1"
        },
        {
            "source": "Intention In Action-Action1.sigmoided activation",
            "target": "Scalars To Vector 3.scalar 2"
        },
        {
            "source": "Intention In Action-Action2.sigmoided activation",
            "target": "Scalars To Vector 3.scalar 3"
        },
        {
            "source": "Intention-In-Action-Node6.sigmoided activation",
            "target": "Scalars To Vector 3.scalar 4"
        },
        {
            "source": "Scalars To Vector 3.vector",
            "target": "Action-Introception-Field.input"
        },
        {
            "source": "Color-Attention-Field.sigmoided activation",
            "target": "Projection 7.input"
        },
        {
            "source": "Vector To Scalars.scalar 2",
            "target": "CoS-Color In Attention.input"
        },
        {
            "source": "Vector To Scalars.scalar 2",
            "target": "Precondition-Color In Attention.input"
        },
        {
            "source": "Vector To Scalars.scalar 2",
            "target": "Intention In Action-Orient To Object.input"
        },
        {
            "source": "Vector To Scalars.scalar 2",
            "target": "CoS-Orient To Object.input"
        },
        {
            "source": "Vector To Scalars.scalar 2",
            "target": "Precondition-Oriented To Object.input"
        },
        {
            "source": "Vector To Scalars.scalar 2",
            "target": "CoS-Is In Front Of.input"
        },
        {
            "source": "Vector To Scalars.scalar 2",
            "target": "Precondition-Is In Front Of.input"
        },
        {
            "source": "Vector To Scalars.scalar 2",
            "target": "Intention In Action-Break.input"
        },
        {
            "source": "Vector To Scalars.scalar 2",
            "target": "CoS-Break.input"
        },
        {
            "source": "Vector To Scalars.scalar 2",
            "target": "Precondition-Break In Front Of Object.input"
        },
        {
            "source": "Vector To Scalars.scalar 2",
            "target": "Intention In Action-Action1.input"
        },
        {
            "source": "Vector To Scalars.scalar 2",
            "target": "CoS-Action1.input"
        },
        {
            "source": "Vector To Scalars.scalar 3",
            "target": "CoS-Color In Attention.input"
        },
        {
            "source": "Vector To Scalars.scalar 3",
            "target": "Precondition-Color In Attention.input"
        },
        {
            "source": "Vector To Scalars.scalar 3",
            "target": "Intention In Action-Orient To Object.input"
        },
        {
            "source": "Vector To Scalars.scalar 3",
            "target": "CoS-Orient To Object.input"
        },
        {
            "source": "Vector To Scalars.scalar 3",
            "target": "Precondition-Oriented To Object.input"
        },
        {
            "source": "Vector To Scalars.scalar 3",
            "target": "CoS-Is In Front Of.input"
        },
        {
            "source": "Vector To Scalars.scalar 3",
            "target": "Precondition-Is In Front Of.input"
        },
        {
            "source": "Vector To Scalars.scalar 3",
            "target": "Intention In Action-Break.input"
        },
        {
            "source": "Vector To Scalars.scalar 3",
            "target": "CoS-Break.input"
        },
        {
            "source": "Vector To Scalars.scalar 3",
            "target": "Precondition-Break In Front Of Object.input"
        },
        {
            "source": "Vector To Scalars.scalar 3",
            "target": "Intention In Action-Action2.input"
        },
        {
            "source": "Vector To Scalars.scalar 3",
            "target": "CoS-Action2.input"
        },
        {
            "source": "Vector To Scalars.scalar 4",
            "target": "CoS-Color In Attention.input"
        },
        {
            "source": "Vector To Scalars.scalar 4",
            "target": "Precondition-Color In Attention.input"
        },
        {
            "source": "Vector To Scalars.scalar 4",
            "target": "Intention In Action-Orient To Object.input"
        },
        {
            "source": "Vector To Scalars.scalar 4",
            "target": "CoS-Orient To Object.input"
        },
        {
            "source": "Vector To Scalars.scalar 4",
            "target": "Precondition-Oriented To Object.input"
        },
        {
            "source": "Vector To Scalars.scalar 4",
            "target": "CoS-Is In Front Of.input"
        },
        {
            "source": "Vector To Scalars.scalar 4",
            "target": "Precondition-Is In Front Of.input"
        },
        {
            "source": "Vector To Scalars.scalar 4",
            "target": "Intention In Action-Break.input"
        },
        {
            "source": "Vector To Scalars.scalar 4",
            "target": "CoS-Break.input"
        },
        {
            "source": "Vector To Scalars.scalar 4",
            "target": "Precondition-Break In Front Of Object.input"
        },
        {
            "source": "Vector To Scalars.scalar 4",
            "target": "Intention-In-Action-Node6.input"
        },
        {
            "source": "Vector To Scalars.scalar 4",
            "target": "CoS-Action3.input"
        },
        {
            "source": "Color-Space-Perception.sigmoided activation",
            "target": "Attention-Color-Binding-Field.input"
        },
        {
            "source": "Scalars To Vector 2.vector",
            "target": "Action-Attention-Field.input"
        },
        {
            "source": "Action-Attention-Field.sigmoided activation",
            "target": "Static Gain 18.input"
        },
        {
            "source": "Static Gain 19.output",
            "target": "Sound-Change-Detection.input"
        },
        {
            "source": "Sound-Attention-Field.sigmoided activation",
            "target": "Sound-Change-Detection.input"
        },
        {
            "source": "Sound-Change-Detection.sigmoided activation",
            "target": "Projection 3.input"
        },
        {
            "source": "Projection 3.output",
            "target": "ActionChange Detection.input"
        },
        {
            "source": "Action-Working-Memory.sigmoided activation",
            "target": "Projection 4.input"
        },
        {
            "source": "Projection 4.output",
            "target": "ActionChange Detection.input"
        },
        {
            "source": "Static Gain 7.output",
            "target": "Intention In Action-Action1.input"
        },
        {
            "source": "CoS-Action1.sigmoided activation",
            "target": "Static Gain 7.input"
        },
        {
            "source": "CoS-Action1.sigmoided activation",
            "target": "CoS1-Trace.input"
        },
        {
            "source": "CoS1-Trace.activation",
            "target": "Scalars To Vector 4.scalar 2"
        },
        {
            "source": "CoS1-Trace.activation",
            "target": "Scalars To Vector 4.scalar 3"
        },
        {
            "source": "CoS1-Trace.activation",
            "target": "Scalars To Vector 4.scalar 4"
        },
        {
            "source": "CoS-Action2.sigmoided activation",
            "target": "CoS2-Trace.input"
        },
        {
            "source": "CoS2-Trace.activation",
            "target": "Scalars To Vector 5.scalar 2"
        },
        {
            "source": "CoS2-Trace.activation",
            "target": "Scalars To Vector 5.scalar 3"
        },
        {
            "source": "CoS2-Trace.activation",
            "target": "Scalars To Vector 5.scalar 4"
        },
        {
            "source": "CoS-Action3.sigmoided activation",
            "target": "CoS3-Trace.input"
        },
        {
            "source": "CoS3-Trace.activation",
            "target": "Scalars To Vector 6.scalar 2"
        },
        {
            "source": "CoS3-Trace.activation",
            "target": "Scalars To Vector 6.scalar 3"
        },
        {
            "source": "CoS3-Trace.activation",
            "target": "Scalars To Vector 6.scalar 4"
        },
        {
            "source": "Scalars To Vector 4.vector",
            "target": "Static Gain 20.input"
        },
        {
            "source": "Scalars To Vector 5.vector",
            "target": "Static Gain 21.input"
        },
        {
            "source": "Scalars To Vector 6.vector",
            "target": "Static Gain 22.input"
        },
        {
            "source": "Static Gain 20.output",
            "target": "Action-Selection-Field.input"
        },
        {
            "source": "Static Gain 21.output",
            "target": "Action-Selection-Field.input"
        },
        {
            "source": "Static Gain 22.output",
            "target": "Action-Selection-Field.input"
        },
        {
            "source": "Static Gain 23.output",
            "target": "Color-Change-Detection.input"
        },
        {
            "source": "Color-Change-Detection.sigmoided activation",
            "target": "Projection 5.input"
        },
        {
            "source": "Projection 5.output",
            "target": "ActionChange Detection.input"
        },
        {
            "source": "Color-Attention-Field.sigmoided activation",
            "target": "Color-Change-Detection.input"
        },
        {
            "source": "Transfer Function 3.sigmoided output",
            "target": "Color-Space-Perception.input"
        },
        {
            "source": "Microphone TCP Reader.output",
            "target": "Sound-Perception.input"
        },
        {
            "source": "Color-Attention-Field.sigmoided activation",
            "target": "Color-Change-Inhibition.input"
        },
        {
            "source": "Color-Change-Inhibition.sigmoided activation",
            "target": "Static Gain 23.input"
        },
        {
            "source": "Sound-Attention-Field.sigmoided activation",
            "target": "Sound-Change-Inhibition.input"
        },
        {
            "source": "Sound-Change-Inhibition.sigmoided activation",
            "target": "Static Gain 19.input"
        },
        {
            "source": "Static Gain 18.output",
            "target": "Action-Change-Inhibition.input"
        },
        {
            "source": "Action-Working-Memory.sigmoided activation",
            "target": "Action-Change-Inhibition.input"
        },
        {
            "source": "Action-Attention-Field.sigmoided activation",
            "target": "Action-Working-Memory.input"
        },
        {
            "source": "Action-Change-Inhibition.sigmoided activation",
            "target": "Static Gain 2.input"
        },
        {
            "source": "Projection 2.output",
            "target": "Transfer Function.input"
        },
        {
            "source": "Static Gain 2.output",
            "target": "Action-Working-Memory.input"
        },
        {
            "source": "Color-Role-Field.sigmoided activation",
            "target": "Projection 11.input"
        },
        {
            "source": "Sound-Role-Field.sigmoided activation",
            "target": "Projection 12.input"
        },
        {
            "source": "Action-Role-Field.sigmoided activation",
            "target": "Projection 13.input"
        },
        {
            "source": "Projection 12.output",
            "target": "k.terms"
        },
        {
            "source": "Projection 11.output",
            "target": "k.terms"
        },
        {
            "source": "Projection 13.output",
            "target": "k.terms"
        },
        {
            "source": "x.vector",
            "target": "sum.terms"
        },
        {
            "source": "dx.vector",
            "target": "sum.terms"
        },
        {
            "source": "k.sum",
            "target": "Component Multiply.operands"
        },
        {
            "source": "x.vector",
            "target": "Component Multiply.operands"
        },
        {
            "source": "Component Multiply 2.product",
            "target": "Belief-Node 6.input"
        },
        {
            "source": "Component Multiply.product",
            "target": "Static Gain 34.input"
        },
        {
            "source": "Static Gain 34.output",
            "target": "Belief-Node 6.input"
        },
        {
            "source": "Component Multiply 3.product",
            "target": "Belief-Node 6.input"
        },
        {
            "source": "Component Multiply 4.product",
            "target": "Belief-Node 6.input"
        },
        {
            "source": "Belief-Node 6.sigmoided activation",
            "target": "Reward Hebb Trace 16.read out trigger"
        },
        {
            "source": "Belief-Node 6.sigmoided activation",
            "target": "Reward Hebb Trace 18.read out trigger"
        },
        {
            "source": "Belief-Node 6.sigmoided activation",
            "target": "Reward Hebb Trace 17.read out trigger"
        },
        {
            "source": "Commit-Node 6.sigmoided activation",
            "target": "Component Multiply 5.operands"
        },
        {
            "source": "j.vector",
            "target": "Component Multiply 5.operands"
        },
        {
            "source": "x.vector",
            "target": "Component Multiply 5.operands"
        },
        {
            "source": "Component Multiply 5.product",
            "target": "Static Gain 32.input"
        },
        {
            "source": "Static Gain 32.output",
            "target": "Belief-Node 6.input"
        },
        {
            "source": "sum.sum",
            "target": "Component Multiply 2.operands"
        },
        {
            "source": "sum.sum",
            "target": "Component Multiply 3.operands"
        },
        {
            "source": "sum.sum",
            "target": "Component Multiply 4.operands"
        },
        {
            "source": "Reward Hebb Trace 16.reciprocal output",
            "target": "Transfer Function 7.input"
        },
        {
            "source": "Transfer Function 7.sigmoided output",
            "target": "Component Multiply 2.operands"
        },
        {
            "source": "Reward Hebb Trace 17.reciprocal output",
            "target": "Transfer Function 9.input"
        },
        {
            "source": "Transfer Function 9.sigmoided output",
            "target": "Component Multiply 4.operands"
        },
        {
            "source": "Reward Hebb Trace 18.reciprocal output",
            "target": "Transfer Function 8.input"
        },
        {
            "source": "Transfer Function 8.sigmoided output",
            "target": "Component Multiply 3.operands"
        },
        {
            "source": "Reward Hebb Trace 15.reciprocal output",
            "target": "Transfer Function 10.input"
        },
        {
            "source": "Reward Hebb Trace 9.reciprocal output",
            "target": "Transfer Function 11.input"
        },
        {
            "source": "Reward Hebb Trace 14.reciprocal output",
            "target": "Transfer Function 12.input"
        },
        {
            "source": "Transfer Function 12.sigmoided output",
            "target": "Component Multiply 8.operands"
        },
        {
            "source": "Transfer Function 11.sigmoided output",
            "target": "Component Multiply 7.operands"
        },
        {
            "source": "Transfer Function 10.sigmoided output",
            "target": "Component Multiply 6.operands"
        },
        {
            "source": "Component Multiply 6.product",
            "target": "Belief-Node 5.input"
        },
        {
            "source": "Component Multiply 7.product",
            "target": "Belief-Node 5.input"
        },
        {
            "source": "Component Multiply 8.product",
            "target": "Belief-Node 5.input"
        },
        {
            "source": "Belief-Node 5.sigmoided activation",
            "target": "Reward Hebb Trace 9.read out trigger"
        },
        {
            "source": "Belief-Node 5.sigmoided activation",
            "target": "Reward Hebb Trace 15.read out trigger"
        },
        {
            "source": "Belief-Node 5.sigmoided activation",
            "target": "Reward Hebb Trace 14.read out trigger"
        },
        {
            "source": "Commit-Node 5.sigmoided activation",
            "target": "Component Multiply 9.operands"
        },
        {
            "source": "j.vector",
            "target": "Component Multiply 9.operands"
        },
        {
            "source": "x.vector",
            "target": "Component Multiply 9.operands"
        },
        {
            "source": "Component Multiply 9.product",
            "target": "Static Gain 31.input"
        },
        {
            "source": "Static Gain 31.output",
            "target": "Belief-Node 5.input"
        },
        {
            "source": "Belief-Node 6.sigmoided activation",
            "target": "Component Multiply 10.operands"
        },
        {
            "source": "j.vector",
            "target": "Component Multiply 10.operands"
        },
        {
            "source": "Component Multiply 10.product",
            "target": "Static Gain 30.input"
        },
        {
            "source": "Static Gain 30.output",
            "target": "Belief-Node 5.input"
        },
        {
            "source": "Belief-Node 5.sigmoided activation",
            "target": "Component Multiply 11.operands"
        },
        {
            "source": "Component Multiply 11.product",
            "target": "Static Gain 33.input"
        },
        {
            "source": "Static Gain 33.output",
            "target": "Belief-Node 6.input"
        },
        {
            "source": "j.vector",
            "target": "Component Multiply 11.operands"
        },
        {
            "source": "Static Gain 34.output",
            "target": "Belief-Node 5.input"
        },
        {
            "source": "sum.sum",
            "target": "Component Multiply 6.operands"
        },
        {
            "source": "sum.sum",
            "target": "Component Multiply 7.operands"
        },
        {
            "source": "sum.sum",
            "target": "Component Multiply 8.operands"
        },
        {
            "source": "Reward Hebb Trace 13.reciprocal output",
            "target": "Transfer Function 14.input"
        },
        {
            "source": "Reward Hebb Trace 11.reciprocal output",
            "target": "Transfer Function 15.input"
        },
        {
            "source": "Reward Hebb Trace 12.reciprocal output",
            "target": "Transfer Function 16.input"
        },
        {
            "source": "Transfer Function 14.sigmoided output",
            "target": "Component Multiply 12.operands"
        },
        {
            "source": "Transfer Function 15.sigmoided output",
            "target": "Component Multiply 13.operands"
        },
        {
            "source": "Transfer Function 16.sigmoided output",
            "target": "Component Multiply 14.operands"
        },
        {
            "source": "sum.sum",
            "target": "Component Multiply 12.operands"
        },
        {
            "source": "sum.sum",
            "target": "Component Multiply 13.operands"
        },
        {
            "source": "sum.sum",
            "target": "Component Multiply 14.operands"
        },
        {
            "source": "Component Multiply 12.product",
            "target": "Belief-Node 4.input"
        },
        {
            "source": "Component Multiply 13.product",
            "target": "Belief-Node 4.input"
        },
        {
            "source": "Component Multiply 14.product",
            "target": "Belief-Node 4.input"
        },
        {
            "source": "Static Gain 34.output",
            "target": "Belief-Node 4.input"
        },
        {
            "source": "Belief-Node 4.sigmoided activation",
            "target": "Component Multiply 15.operands"
        },
        {
            "source": "Component Multiply 15.product",
            "target": "Static Gain 28.input"
        },
        {
            "source": "Static Gain 33.output",
            "target": "Belief-Node 4.input"
        },
        {
            "source": "Static Gain 30.output",
            "target": "Belief-Node 4.input"
        },
        {
            "source": "Static Gain 28.output",
            "target": "Belief-Node 5.input"
        },
        {
            "source": "Static Gain 28.output",
            "target": "Belief-Node 6.input"
        },
        {
            "source": "j.vector",
            "target": "Component Multiply 15.operands"
        },
        {
            "source": "Belief-Node 4.sigmoided activation",
            "target": "Reward Hebb Trace 13.read out trigger"
        },
        {
            "source": "Belief-Node 4.sigmoided activation",
            "target": "Reward Hebb Trace 11.read out trigger"
        },
        {
            "source": "Belief-Node 4.sigmoided activation",
            "target": "Reward Hebb Trace 12.read out trigger"
        },
        {
            "source": "Commit-Node 4.sigmoided activation",
            "target": "Component Multiply 16.operands"
        },
        {
            "source": "x.vector",
            "target": "Component Multiply 16.operands"
        },
        {
            "source": "j.vector",
            "target": "Component Multiply 16.operands"
        },
        {
            "source": "Component Multiply 16.product",
            "target": "Static Gain 29.input"
        },
        {
            "source": "Static Gain 29.output",
            "target": "Belief-Node 4.input"
        },
        {
            "source": "Reward Hebb Trace 7.reciprocal output",
            "target": "Transfer Function 18.input"
        },
        {
            "source": "Reward Hebb Trace 8.reciprocal output",
            "target": "Transfer Function 19.input"
        },
        {
            "source": "Reward Hebb Trace 10.reciprocal output",
            "target": "Transfer Function 20.input"
        },
        {
            "source": "Transfer Function 20.sigmoided output",
            "target": "Component Multiply 19.operands"
        },
        {
            "source": "Transfer Function 19.sigmoided output",
            "target": "Component Multiply 18.operands"
        },
        {
            "source": "Transfer Function 18.sigmoided output",
            "target": "Component Multiply 17.operands"
        },
        {
            "source": "Component Multiply 17.product",
            "target": "Belief-Node 3.input"
        },
        {
            "source": "Component Multiply 18.product",
            "target": "Belief-Node 3.input"
        },
        {
            "source": "Component Multiply 19.product",
            "target": "Belief-Node 3.input"
        },
        {
            "source": "Static Gain 34.output",
            "target": "Belief-Node 3.input"
        },
        {
            "source": "Belief-Node 3.sigmoided activation",
            "target": "Component Multiply 20.operands"
        },
        {
            "source": "j.vector",
            "target": "Component Multiply 20.operands"
        },
        {
            "source": "Component Multiply 20.product",
            "target": "Static Gain 26.input"
        },
        {
            "source": "Static Gain 26.output",
            "target": "Belief-Node 4.input"
        },
        {
            "source": "Static Gain 26.output",
            "target": "Belief-Node 5.input"
        },
        {
            "source": "Static Gain 26.output",
            "target": "Belief-Node 6.input"
        },
        {
            "source": "Static Gain 30.output",
            "target": "Belief-Node 3.input"
        },
        {
            "source": "Static Gain 33.output",
            "target": "Belief-Node 3.input"
        },
        {
            "source": "Static Gain 28.output",
            "target": "Belief-Node 3.input"
        },
        {
            "source": "x.vector",
            "target": "Component Multiply 21.operands"
        },
        {
            "source": "Commit-Node 3.sigmoided activation",
            "target": "Component Multiply 21.operands"
        },
        {
            "source": "j.vector",
            "target": "Component Multiply 21.operands"
        },
        {
            "source": "Component Multiply 21.product",
            "target": "Static Gain 27.input"
        },
        {
            "source": "Static Gain 27.output",
            "target": "Belief-Node 3.input"
        },
        {
            "source": "Belief-Node 3.sigmoided activation",
            "target": "Reward Hebb Trace 7.read out trigger"
        },
        {
            "source": "Belief-Node 3.sigmoided activation",
            "target": "Reward Hebb Trace 8.read out trigger"
        },
        {
            "source": "Belief-Node 3.sigmoided activation",
            "target": "Reward Hebb Trace 10.read out trigger"
        },
        {
            "source": "sum.sum",
            "target": "Component Multiply 17.operands"
        },
        {
            "source": "sum.sum",
            "target": "Component Multiply 18.operands"
        },
        {
            "source": "sum.sum",
            "target": "Component Multiply 19.operands"
        },
        {
            "source": "Transfer Function 22.sigmoided output",
            "target": "Component Multiply 22.operands"
        },
        {
            "source": "Transfer Function 23.sigmoided output",
            "target": "Component Multiply 23.operands"
        },
        {
            "source": "Transfer Function 24.sigmoided output",
            "target": "Component Multiply 24.operands"
        },
        {
            "source": "sum.sum",
            "target": "Component Multiply 22.operands"
        },
        {
            "source": "sum.sum",
            "target": "Component Multiply 23.operands"
        },
        {
            "source": "sum.sum",
            "target": "Component Multiply 24.operands"
        },
        {
            "source": "Component Multiply 24.product",
            "target": "Belief-Node 2.input"
        },
        {
            "source": "Component Multiply 23.product",
            "target": "Belief-Node 2.input"
        },
        {
            "source": "Component Multiply 22.product",
            "target": "Belief-Node 2.input"
        },
        {
            "source": "Belief-Node 2.sigmoided activation",
            "target": "Component Multiply 25.operands"
        },
        {
            "source": "j.vector",
            "target": "Component Multiply 25.operands"
        },
        {
            "source": "Component Multiply 25.product",
            "target": "Static Gain 3.input"
        },
        {
            "source": "Static Gain 3.output",
            "target": "Belief-Node 3.input"
        },
        {
            "source": "Static Gain 3.output",
            "target": "Belief-Node 4.input"
        },
        {
            "source": "Static Gain 3.output",
            "target": "Belief-Node 5.input"
        },
        {
            "source": "Static Gain 3.output",
            "target": "Belief-Node 6.input"
        },
        {
            "source": "Static Gain 30.output",
            "target": "Belief-Node 2.input"
        },
        {
            "source": "Static Gain 33.output",
            "target": "Belief-Node 2.input"
        },
        {
            "source": "Static Gain 28.output",
            "target": "Belief-Node 2.input"
        },
        {
            "source": "x.vector",
            "target": "Component Multiply 26.operands"
        },
        {
            "source": "j.vector",
            "target": "Component Multiply 26.operands"
        },
        {
            "source": "Commit-Node 2.sigmoided activation",
            "target": "Component Multiply 26.operands"
        },
        {
            "source": "Component Multiply 26.product",
            "target": "Static Gain 4.input"
        },
        {
            "source": "Static Gain 4.output",
            "target": "Belief-Node 2.input"
        },
        {
            "source": "Static Gain 26.output",
            "target": "Belief-Node 2.input"
        },
        {
            "source": "Reward Hebb Trace 6.reciprocal output",
            "target": "Transfer Function 24.input"
        },
        {
            "source": "Belief-Node 2.sigmoided activation",
            "target": "Reward Hebb Trace 6.read out trigger"
        },
        {
            "source": "Static Gain 34.output",
            "target": "Belief-Node 2.input"
        },
        {
            "source": "Transfer Function 26.sigmoided output",
            "target": "Component Multiply 27.operands"
        },
        {
            "source": "Transfer Function 27.sigmoided output",
            "target": "Component Multiply 28.operands"
        },
        {
            "source": "Transfer Function 28.sigmoided output",
            "target": "Component Multiply 29.operands"
        },
        {
            "source": "sum.sum",
            "target": "Component Multiply 27.operands"
        },
        {
            "source": "sum.sum",
            "target": "Component Multiply 28.operands"
        },
        {
            "source": "sum.sum",
            "target": "Component Multiply 29.operands"
        },
        {
            "source": "Belief-Node 1.sigmoided activation",
            "target": "Component Multiply 30.operands"
        },
        {
            "source": "Component Multiply 30.product",
            "target": "Static Gain 24.input"
        },
        {
            "source": "Component Multiply 27.product",
            "target": "Belief-Node 1.input"
        },
        {
            "source": "Component Multiply 28.product",
            "target": "Belief-Node 1.input"
        },
        {
            "source": "Component Multiply 29.product",
            "target": "Belief-Node 1.input"
        },
        {
            "source": "j.vector",
            "target": "Component Multiply 30.operands"
        },
        {
            "source": "Static Gain 24.output",
            "target": "Belief-Node 2.input"
        },
        {
            "source": "Static Gain 24.output",
            "target": "Belief-Node 3.input"
        },
        {
            "source": "Static Gain 24.output",
            "target": "Belief-Node 4.input"
        },
        {
            "source": "Static Gain 24.output",
            "target": "Belief-Node 5.input"
        },
        {
            "source": "Static Gain 24.output",
            "target": "Belief-Node 6.input"
        },
        {
            "source": "Static Gain 3.output",
            "target": "Belief-Node 1.input"
        },
        {
            "source": "Static Gain 26.output",
            "target": "Belief-Node 1.input"
        },
        {
            "source": "Static Gain 28.output",
            "target": "Belief-Node 1.input"
        },
        {
            "source": "Static Gain 33.output",
            "target": "Belief-Node 1.input"
        },
        {
            "source": "Static Gain 30.output",
            "target": "Belief-Node 1.input"
        },
        {
            "source": "Commit-Node 1.sigmoided activation",
            "target": "Component Multiply 31.operands"
        },
        {
            "source": "j.vector",
            "target": "Component Multiply 31.operands"
        },
        {
            "source": "x.vector",
            "target": "Component Multiply 31.operands"
        },
        {
            "source": "Component Multiply 31.product",
            "target": "Static Gain 25.input"
        },
        {
            "source": "Static Gain 25.output",
            "target": "Belief-Node 1.input"
        },
        {
            "source": "Static Gain 34.output",
            "target": "Belief-Node 1.input"
        },
        {
            "source": "Reward Hebb Trace 19.reciprocal output",
            "target": "Transfer Function 26.input"
        },
        {
            "source": "Reward Hebb Trace 2.reciprocal output",
            "target": "Transfer Function 27.input"
        },
        {
            "source": "Reward Hebb Trace 3.reciprocal output",
            "target": "Transfer Function 28.input"
        },
        {
            "source": "Belief-Node 1.sigmoided activation",
            "target": "Reward Hebb Trace 19.read out trigger"
        },
        {
            "source": "Belief-Node 1.sigmoided activation",
            "target": "Reward Hebb Trace 2.read out trigger"
        },
        {
            "source": "Belief-Node 1.sigmoided activation",
            "target": "Reward Hebb Trace 3.read out trigger"
        },
        {
            "source": "Color-Role-Field.sigmoided activation",
            "target": "Reward Hebb Trace 16.association input"
        },
        {
            "source": "Color-Role-Field.sigmoided activation",
            "target": "Reward Hebb Trace 15.association input"
        },
        {
            "source": "Color-Role-Field.sigmoided activation",
            "target": "Reward Hebb Trace 13.association input"
        },
        {
            "source": "Color-Role-Field.sigmoided activation",
            "target": "Reward Hebb Trace 7.association input"
        },
        {
            "source": "Color-Role-Field.sigmoided activation",
            "target": "Reward Hebb Trace 19.association input"
        },
        {
            "source": "Sound-Role-Field.sigmoided activation",
            "target": "Reward Hebb Trace 18.association input"
        },
        {
            "source": "Sound-Role-Field.sigmoided activation",
            "target": "Reward Hebb Trace 9.association input"
        },
        {
            "source": "Sound-Role-Field.sigmoided activation",
            "target": "Reward Hebb Trace 11.association input"
        },
        {
            "source": "Sound-Role-Field.sigmoided activation",
            "target": "Reward Hebb Trace 8.association input"
        },
        {
            "source": "Sound-Role-Field.sigmoided activation",
            "target": "Reward Hebb Trace 2.association input"
        },
        {
            "source": "Action-Role-Field.sigmoided activation",
            "target": "Reward Hebb Trace 17.association input"
        },
        {
            "source": "Action-Role-Field.sigmoided activation",
            "target": "Reward Hebb Trace 14.association input"
        },
        {
            "source": "Action-Role-Field.sigmoided activation",
            "target": "Reward Hebb Trace 12.association input"
        },
        {
            "source": "Action-Role-Field.sigmoided activation",
            "target": "Reward Hebb Trace 10.association input"
        },
        {
            "source": "Action-Role-Field.sigmoided activation",
            "target": "Reward Hebb Trace 6.association input"
        },
        {
            "source": "Action-Role-Field.sigmoided activation",
            "target": "Reward Hebb Trace 3.association input"
        },
        {
            "source": "Reward Hebb Trace 16.trigger output",
            "target": "Static Gain 37.input"
        },
        {
            "source": "Reward Hebb Trace 18.trigger output",
            "target": "Static Gain 36.input"
        },
        {
            "source": "Reward Hebb Trace 17.trigger output",
            "target": "Static Gain 35.input"
        },
        {
            "source": "Static Gain 37.output",
            "target": "Color-Role-Field.input"
        },
        {
            "source": "Static Gain 36.output",
            "target": "Sound-Role-Field.input"
        },
        {
            "source": "Static Gain 35.output",
            "target": "Action-Role-Field.input"
        },
        {
            "source": "Reward Hebb Trace 15.trigger output",
            "target": "Static Gain 38.input"
        },
        {
            "source": "Reward Hebb Trace 9.trigger output",
            "target": "Static Gain 39.input"
        },
        {
            "source": "Reward Hebb Trace 14.trigger output",
            "target": "Static Gain 40.input"
        },
        {
            "source": "Static Gain 38.output",
            "target": "Color-Role-Field.input"
        },
        {
            "source": "Static Gain 39.output",
            "target": "Sound-Role-Field.input"
        },
        {
            "source": "Static Gain 40.output",
            "target": "Action-Role-Field.input"
        },
        {
            "source": "Reward Hebb Trace 13.trigger output",
            "target": "Static Gain 41.input"
        },
        {
            "source": "Reward Hebb Trace 11.trigger output",
            "target": "Static Gain 42.input"
        },
        {
            "source": "Reward Hebb Trace 12.trigger output",
            "target": "Static Gain 43.input"
        },
        {
            "source": "Static Gain 41.output",
            "target": "Color-Role-Field.input"
        },
        {
            "source": "Static Gain 42.output",
            "target": "Sound-Role-Field.input"
        },
        {
            "source": "Static Gain 43.output",
            "target": "Action-Role-Field.input"
        },
        {
            "source": "Reward Hebb Trace 7.trigger output",
            "target": "Static Gain 44.input"
        },
        {
            "source": "Reward Hebb Trace 8.trigger output",
            "target": "Static Gain 45.input"
        },
        {
            "source": "Reward Hebb Trace 10.trigger output",
            "target": "Static Gain 46.input"
        },
        {
            "source": "Static Gain 44.output",
            "target": "Color-Role-Field.input"
        },
        {
            "source": "Static Gain 45.output",
            "target": "Sound-Role-Field.input"
        },
        {
            "source": "Static Gain 46.output",
            "target": "Action-Role-Field.input"
        },
        {
            "source": "Reward Hebb Trace 6.trigger output",
            "target": "Static Gain 49.input"
        },
        {
            "source": "Reward Hebb Trace 19.trigger output",
            "target": "Static Gain 50.input"
        },
        {
            "source": "Reward Hebb Trace 2.trigger output",
            "target": "Static Gain 51.input"
        },
        {
            "source": "Reward Hebb Trace 3.trigger output",
            "target": "Static Gain 52.input"
        },
        {
            "source": "Static Gain 47.output",
            "target": "Color-Role-Field.input"
        },
        {
            "source": "Static Gain 48.output",
            "target": "Sound-Role-Field.input"
        },
        {
            "source": "Static Gain 49.output",
            "target": "Action-Role-Field.input"
        },
        {
            "source": "Static Gain 50.output",
            "target": "Color-Role-Field.input"
        },
        {
            "source": "Static Gain 51.output",
            "target": "Sound-Role-Field.input"
        },
        {
            "source": "Static Gain 52.output",
            "target": "Action-Role-Field.input"
        },
        {
            "source": "Belief-Node 6.sigmoided activation",
            "target": "Static Gain 53.input"
        },
        {
            "source": "Static Gain 53.output",
            "target": "Commit-Node 6.input"
        },
        {
            "source": "Belief-Node 5.sigmoided activation",
            "target": "Static Gain 54.input"
        },
        {
            "source": "Static Gain 54.output",
            "target": "Commit-Node 5.input"
        },
        {
            "source": "Belief-Node 4.sigmoided activation",
            "target": "Static Gain 55.input"
        },
        {
            "source": "Static Gain 55.output",
            "target": "Commit-Node 4.input"
        },
        {
            "source": "Belief-Node 3.sigmoided activation",
            "target": "Static Gain 56.input"
        },
        {
            "source": "Static Gain 56.output",
            "target": "Commit-Node 3.input"
        },
        {
            "source": "Belief-Node 2.sigmoided activation",
            "target": "Static Gain 57.input"
        },
        {
            "source": "Static Gain 57.output",
            "target": "Commit-Node 2.input"
        },
        {
            "source": "Belief-Node 1.sigmoided activation",
            "target": "Static Gain 58.input"
        },
        {
            "source": "Static Gain 58.output",
            "target": "Commit-Node 1.input"
        },
        {
            "source": "Commit Boost.sigmoided activation",
            "target": "Static Gain 59.input"
        },
        {
            "source": "Static Gain 59.output",
            "target": "Commit-Node 1.input"
        },
        {
            "source": "Static Gain 59.output",
            "target": "Commit-Node 2.input"
        },
        {
            "source": "Static Gain 59.output",
            "target": "Commit-Node 3.input"
        },
        {
            "source": "Static Gain 59.output",
            "target": "Commit-Node 4.input"
        },
        {
            "source": "Static Gain 59.output",
            "target": "Commit-Node 5.input"
        },
        {
            "source": "Static Gain 59.output",
            "target": "Commit-Node 6.input"
        },
        {
            "source": "Recruitment Boost.sigmoided activation",
            "target": "Static Gain 60.input"
        },
        {
            "source": "Static Gain 60.output",
            "target": "Component Multiply 32.operands"
        },
        {
            "source": "j.vector",
            "target": "Component Multiply 32.operands"
        },
        {
            "source": "x.vector",
            "target": "Component Multiply 32.operands"
        },
        {
            "source": "Component Multiply 32.product",
            "target": "Belief-Node 1.input"
        },
        {
            "source": "Component Multiply 32.product",
            "target": "Belief-Node 2.input"
        },
        {
            "source": "Component Multiply 32.product",
            "target": "Belief-Node 3.input"
        },
        {
            "source": "Component Multiply 32.product",
            "target": "Belief-Node 4.input"
        },
        {
            "source": "Component Multiply 32.product",
            "target": "Belief-Node 5.input"
        },
        {
            "source": "Component Multiply 32.product",
            "target": "Belief-Node 6.input"
        },
        {
            "source": "Reward-Node.sigmoided activation",
            "target": "Reward Hebb Trace 3.reward signal"
        },
        {
            "source": "Reward-Node.sigmoided activation",
            "target": "Reward Hebb Trace 2.reward signal"
        },
        {
            "source": "Reward-Node.sigmoided activation",
            "target": "Reward Hebb Trace 19.reward signal"
        },
        {
            "source": "Reward-Node.sigmoided activation",
            "target": "Reward Hebb Trace 6.reward signal"
        },
        {
            "source": "Reward-Node.sigmoided activation",
            "target": "Reward Hebb Trace 10.reward signal"
        },
        {
            "source": "Reward-Node.sigmoided activation",
            "target": "Reward Hebb Trace 8.reward signal"
        },
        {
            "source": "Reward-Node.sigmoided activation",
            "target": "Reward Hebb Trace 7.reward signal"
        },
        {
            "source": "Reward-Node.sigmoided activation",
            "target": "Reward Hebb Trace 12.reward signal"
        },
        {
            "source": "Reward-Node.sigmoided activation",
            "target": "Reward Hebb Trace 11.reward signal"
        },
        {
            "source": "Reward-Node.sigmoided activation",
            "target": "Reward Hebb Trace 13.reward signal"
        },
        {
            "source": "Reward-Node.sigmoided activation",
            "target": "Reward Hebb Trace 14.reward signal"
        },
        {
            "source": "Reward-Node.sigmoided activation",
            "target": "Reward Hebb Trace 9.reward signal"
        },
        {
            "source": "Reward-Node.sigmoided activation",
            "target": "Reward Hebb Trace 15.reward signal"
        },
        {
            "source": "Reward-Node.sigmoided activation",
            "target": "Reward Hebb Trace 17.reward signal"
        },
        {
            "source": "Reward-Node.sigmoided activation",
            "target": "Reward Hebb Trace 18.reward signal"
        },
        {
            "source": "Reward-Node.sigmoided activation",
            "target": "Reward Hebb Trace 16.reward signal"
        },
        {
            "source": "ActionChange Detection.sigmoided activation",
            "target": "Recruitment Boost.input"
        },
        {
            "source": "ActionChange Detection.sigmoided activation",
            "target": "Commit Boost.input"
        },
        {
            "source": "ActionChange Detection.sigmoided activation",
            "target": "Reward-Node.input"
        },
        {
            "source": "Belief-Node 1.sigmoided activation",
            "target": "Reward-Node.input"
        },
        {
            "source": "Belief-Node 2.sigmoided activation",
            "target": "Reward-Node.input"
        },
        {
            "source": "Belief-Node 3.sigmoided activation",
            "target": "Reward-Node.input"
        },
        {
            "source": "Belief-Node 4.sigmoided activation",
            "target": "Reward-Node.input"
        },
        {
            "source": "Belief-Node 5.sigmoided activation",
            "target": "Reward-Node.input"
        },
        {
            "source": "Belief-Node 6.sigmoided activation",
            "target": "Reward-Node.input"
        },
        {
            "source": "Commit-Node 5.sigmoided activation",
            "target": "Reward Hebb Trace 20.association input"
        },
        {
            "source": "Commit-Node 4.sigmoided activation",
            "target": "Reward Hebb Trace 21.association input"
        },
        {
            "source": "Commit-Node 3.sigmoided activation",
            "target": "Reward Hebb Trace 22.association input"
        },
        {
            "source": "Commit-Node 2.sigmoided activation",
            "target": "Reward Hebb Trace 23.association input"
        },
        {
            "source": "Commit-Node 1.sigmoided activation",
            "target": "Reward Hebb Trace 24.association input"
        },
        {
            "source": "Static Gain 61.output",
            "target": "Commit-Node 6.input"
        },
        {
            "source": "Reward Hebb Trace 20.trigger output",
            "target": "Static Gain 62.input"
        },
        {
            "source": "Reward Hebb Trace 21.trigger output",
            "target": "Static Gain 63.input"
        },
        {
            "source": "Reward Hebb Trace 22.trigger output",
            "target": "Static Gain 64.input"
        },
        {
            "source": "Reward Hebb Trace 23.trigger output",
            "target": "Static Gain 65.input"
        },
        {
            "source": "Reward Hebb Trace 24.trigger output",
            "target": "Static Gain 66.input"
        },
        {
            "source": "Static Gain 62.output",
            "target": "Commit-Node 5.input"
        },
        {
            "source": "Static Gain 63.output",
            "target": "Commit-Node 4.input"
        },
        {
            "source": "Static Gain 64.output",
            "target": "Commit-Node 3.input"
        },
        {
            "source": "Static Gain 65.output",
            "target": "Commit-Node 2.input"
        },
        {
            "source": "Static Gain 66.output",
            "target": "Commit-Node 1.input"
        },
        {
            "source": "Belief-Network-Node.sigmoided activation",
            "target": "Reward Hebb Trace 20.read out trigger"
        },
        {
            "source": "Belief-Network-Node.sigmoided activation",
            "target": "Reward Hebb Trace 21.read out trigger"
        },
        {
            "source": "Belief-Network-Node.sigmoided activation",
            "target": "Reward Hebb Trace 22.read out trigger"
        },
        {
            "source": "Belief-Network-Node.sigmoided activation",
            "target": "Reward Hebb Trace 23.read out trigger"
        },
        {
            "source": "Belief-Network-Node.sigmoided activation",
            "target": "Reward Hebb Trace 24.read out trigger"
        },
        {
            "source": "Belief-Boost.boost",
            "target": "Belief-Network-Node.input"
        },
        {
            "source": "Recruitment Boost.sigmoided activation",
            "target": "Reward Hebb Trace 24.reward signal"
        },
        {
            "source": "Recruitment Boost.sigmoided activation",
            "target": "Reward Hebb Trace 23.reward signal"
        },
        {
            "source": "Recruitment Boost.sigmoided activation",
            "target": "Reward Hebb Trace 22.reward signal"
        },
        {
            "source": "Recruitment Boost.sigmoided activation",
            "target": "Reward Hebb Trace 21.reward signal"
        },
        {
            "source": "Recruitment Boost.sigmoided activation",
            "target": "Reward Hebb Trace 20.reward signal"
        },
        {
            "source": "Color-Attention-Field.sigmoided activation",
            "target": "Color-Role-Field.input"
        },
        {
            "source": "Sound-Attention-Field.sigmoided activation",
            "target": "Sound-Role-Field.input"
        },
        {
            "source": "Commit-Node 6.sigmoided activation",
            "target": "Reward Hebb Trace.association input"
        },
        {
            "source": "Reward Hebb Trace.trigger output",
            "target": "Static Gain 61.input"
        },
        {
            "source": "Belief-Network-Node.sigmoided activation",
            "target": "Reward Hebb Trace.read out trigger"
        },
        {
            "source": "Recruitment Boost.sigmoided activation",
            "target": "Reward Hebb Trace.reward signal"
        },
        {
            "source": "Reward Hebb Trace 4.trigger output",
            "target": "Static Gain 47.input"
        },
        {
            "source": "Reward Hebb Trace 5.trigger output",
            "target": "Static Gain 48.input"
        },
        {
            "source": "Reward Hebb Trace 4.reciprocal output",
            "target": "Transfer Function 22.input"
        },
        {
            "source": "Reward Hebb Trace 5.reciprocal output",
            "target": "Transfer Function 23.input"
        },
        {
            "source": "Sound-Role-Field.sigmoided activation",
            "target": "Reward Hebb Trace 5.association input"
        },
        {
            "source": "Color-Role-Field.sigmoided activation",
            "target": "Reward Hebb Trace 4.association input"
        },
        {
            "source": "Belief-Node 2.sigmoided activation",
            "target": "Reward Hebb Trace 5.read out trigger"
        },
        {
            "source": "Belief-Node 2.sigmoided activation",
            "target": "Reward Hebb Trace 4.read out trigger"
        },
        {
            "source": "Reward-Node.sigmoided activation",
            "target": "Reward Hebb Trace 5.reward signal"
        },
        {
            "source": "Reward-Node.sigmoided activation",
            "target": "Reward Hebb Trace 4.reward signal"
        },
        {
            "source": "Recruitment Boost.sigmoided activation",
            "target": "Color-Role-Field.input"
        },
        {
            "source": "Recruitment Boost.sigmoided activation",
            "target": "Sound-Role-Field.input"
        },
        {
            "source": "Recruitment Boost.sigmoided activation",
            "target": "Action-Role-Field.input"
        },
        {
            "source": "Action-Working-Memory.sigmoided activation",
            "target": "Action-Role-Field.input"
        },
        {
            "source": "x.vector",
            "target": "Component Multiply 10.operands"
        },
        {
            "source": "x.vector",
            "target": "Component Multiply 11.operands"
        },
        {
            "source": "x.vector",
            "target": "Component Multiply 15.operands"
        },
        {
            "source": "x.vector",
            "target": "Component Multiply 20.operands"
        },
        {
            "source": "x.vector",
            "target": "Component Multiply 25.operands"
        },
        {
            "source": "x.vector",
            "target": "Component Multiply 30.operands"
        },
        {
            "source": "Sound-Goal-Field.sigmoided activation",
            "target": "Sound-Role-Field.input"
        },
        {
            "source": "Sound-Goal-Field.sigmoided activation",
            "target": "Projection 14.input"
        },
        {
            "source": "Projection 14.output",
            "target": "Static Gain 67.input"
        },
        {
            "source": "Static Gain 67.output",
            "target": "Belief-Node 6.input"
        },
        {
            "source": "Static Gain 67.output",
            "target": "Belief-Node 5.input"
        },
        {
            "source": "Static Gain 67.output",
            "target": "Belief-Node 4.input"
        },
        {
            "source": "Static Gain 67.output",
            "target": "Belief-Node 3.input"
        },
        {
            "source": "Static Gain 67.output",
            "target": "Belief-Node 2.input"
        },
        {
            "source": "Static Gain 67.output",
            "target": "Belief-Node 1.input"
        },
        {
            "source": "Goal-Directed-Mode.boost",
            "target": "Sound-Role-Field.input"
        },
        {
            "source": "Goal-Directed-Mode.boost",
            "target": "Color-Role-Field.input"
        },
        {
            "source": "Goal-Directed-Mode.boost",
            "target": "Action-Role-Field.input"
        },
        {
            "source": "Goal-Directed-Mode.boost",
            "target": "Sound-Action-Field.input"
        },
        {
            "source": "Goal-Directed-Mode.boost",
            "target": "Color-Action-Field.input"
        },
        {
            "source": "Goal-Directed-Mode.boost",
            "target": "Action-Selection-Field.input"
        },
        {
            "source": "Color-Role-Field.sigmoided activation",
            "target": "Color-Action-Field.input"
        },
        {
            "source": "Sound-Role-Field.sigmoided activation",
            "target": "Sound-Action-Field.input"
        },
        {
            "source": "Action-Role-Field.sigmoided activation",
            "target": "Action-Selection-Field.input"
        },
        {
            "source": "Color-Action-Field.sigmoided activation",
            "target": "Color-Attention-Field.input"
        },
        {
            "source": "Transfer Function.sigmoided output",
            "target": "Static Gain 68.input"
        },
        {
            "source": "Static Gain 68.output",
            "target": "Color-Attention-Field.input"
        },
        {
            "source": "Exploration-Goal-Node.sigmoided activation",
            "target": "Recruitment Boost.input"
        }
    ],
    "scripts": [
        {
            "type": "cedar.proc.scripts.ExecuteFunctionOnStepsPlugin",
            "configuration": {
                "name": "Execute Function On Steps Plugin",
                "FunctionName": "RewardHebbTrace->resetWeights()"
            }
        }
    ],
    "name": "element",
    "connectors": "",
    "is looped": "false",
    "time factor": "1",
    "ui": [
        {
            "type": "connections",
            "connections": ""
        },
        {
            "type": "step",
            "step": "Action-Attention-Field",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "728",
            "positionY": "546"
        },
        {
            "type": "step",
            "step": "Action-Change-Inhibition",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "938",
            "positionY": "280"
        },
        {
            "type": "step",
            "step": "Action-Introception-Field",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "532",
            "positionY": "966"
        },
        {
            "type": "step",
            "step": "Action-Role-Field",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "140",
            "positionY": "-728"
        },
        {
            "type": "step",
            "step": "Action-Selection-Field",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-1386",
            "positionY": "-42"
        },
        {
            "type": "step",
            "step": "Action-Working-Memory",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "938",
            "positionY": "224"
        },
        {
            "type": "step",
            "step": "ActionChange Detection",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "840",
            "positionY": "84"
        },
        {
            "type": "step",
            "step": "Attention-Color-Binding-Field",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-4088",
            "positionY": "1106"
        },
        {
            "type": "step",
            "step": "Belief-Boost",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "2338",
            "positionY": "-812"
        },
        {
            "type": "step",
            "step": "Belief-Network-Node",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "2170",
            "positionY": "-812"
        },
        {
            "type": "step",
            "step": "Belief-Node 1",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "1064",
            "positionY": "-168"
        },
        {
            "type": "step",
            "step": "Belief-Node 2",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "1064",
            "positionY": "-420"
        },
        {
            "type": "step",
            "step": "Belief-Node 3",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "1064",
            "positionY": "-672"
        },
        {
            "type": "step",
            "step": "Belief-Node 4",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "1064",
            "positionY": "-924"
        },
        {
            "type": "step",
            "step": "Belief-Node 5",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "1064",
            "positionY": "-1176"
        },
        {
            "type": "step",
            "step": "Belief-Node 6",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "1064",
            "positionY": "-1428"
        },
        {
            "type": "step",
            "step": "Camera TCP Reader",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-882",
            "positionY": "1372"
        },
        {
            "type": "step",
            "step": "Channel Split",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-504",
            "positionY": "1372"
        },
        {
            "type": "step",
            "step": "CoS-Action1",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-1582",
            "positionY": "728"
        },
        {
            "type": "step",
            "step": "CoS-Action2",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-1582",
            "positionY": "938"
        },
        {
            "type": "step",
            "step": "CoS-Action3",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-1582",
            "positionY": "1148"
        },
        {
            "type": "step",
            "step": "CoS-Break",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-2422",
            "positionY": "952"
        },
        {
            "type": "step",
            "step": "CoS-Color In Attention",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-4340",
            "positionY": "952"
        },
        {
            "type": "step",
            "step": "CoS-Is In Front Of",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-2996",
            "positionY": "952"
        },
        {
            "type": "step",
            "step": "CoS-Orient To Object",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-3472",
            "positionY": "952"
        },
        {
            "type": "step",
            "step": "CoS1-Trace",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-1442",
            "positionY": "784"
        },
        {
            "type": "step",
            "step": "CoS2-Trace",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-1442",
            "positionY": "994"
        },
        {
            "type": "step",
            "step": "CoS3-Trace",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-1442",
            "positionY": "1204"
        },
        {
            "type": "step",
            "step": "Color Conversion",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-700",
            "positionY": "1372"
        },
        {
            "type": "step",
            "step": "Color-Action-Field",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-1386",
            "positionY": "-112"
        },
        {
            "type": "step",
            "step": "Color-Attention-Field",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "264.38356164383544",
            "positionY": "542.46575342465769"
        },
        {
            "type": "step",
            "step": "Color-Change-Detection",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "406",
            "positionY": "224"
        },
        {
            "type": "step",
            "step": "Color-Change-Inhibition",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "406",
            "positionY": "280"
        },
        {
            "type": "step",
            "step": "Color-Role-Field",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "140",
            "positionY": "-896"
        },
        {
            "type": "step",
            "step": "Color-Space-Perception",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "14",
            "positionY": "952"
        },
        {
            "type": "step",
            "step": "Color-matching-Field",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-4536",
            "positionY": "980"
        },
        {
            "type": "step",
            "step": "Commit Boost",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "1162",
            "positionY": "-14"
        },
        {
            "type": "step",
            "step": "Commit-Node 1",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "1372",
            "positionY": "-168"
        },
        {
            "type": "step",
            "step": "Commit-Node 2",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "1372",
            "positionY": "-420"
        },
        {
            "type": "step",
            "step": "Commit-Node 3",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "1372",
            "positionY": "-672"
        },
        {
            "type": "step",
            "step": "Commit-Node 4",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "1372",
            "positionY": "-924"
        },
        {
            "type": "step",
            "step": "Commit-Node 5",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "1372",
            "positionY": "-1176"
        },
        {
            "type": "step",
            "step": "Commit-Node 6",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "1372",
            "positionY": "-1428"
        },
        {
            "type": "step",
            "step": "Component Multiply",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "840",
            "positionY": "-1638"
        },
        {
            "type": "step",
            "step": "Component Multiply 10",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1218",
            "positionY": "-1386"
        },
        {
            "type": "step",
            "step": "Component Multiply 11",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1218",
            "positionY": "-1134"
        },
        {
            "type": "step",
            "step": "Component Multiply 12",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "896",
            "positionY": "-994"
        },
        {
            "type": "step",
            "step": "Component Multiply 13",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "896",
            "positionY": "-924"
        },
        {
            "type": "step",
            "step": "Component Multiply 14",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "896",
            "positionY": "-854"
        },
        {
            "type": "step",
            "step": "Component Multiply 15",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1218",
            "positionY": "-882"
        },
        {
            "type": "step",
            "step": "Component Multiply 16",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1512",
            "positionY": "-910"
        },
        {
            "type": "step",
            "step": "Component Multiply 17",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "896",
            "positionY": "-742"
        },
        {
            "type": "step",
            "step": "Component Multiply 18",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "896",
            "positionY": "-672"
        },
        {
            "type": "step",
            "step": "Component Multiply 19",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "896",
            "positionY": "-602"
        },
        {
            "type": "step",
            "step": "Component Multiply 2",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "896",
            "positionY": "-1498"
        },
        {
            "type": "step",
            "step": "Component Multiply 20",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1218",
            "positionY": "-630"
        },
        {
            "type": "step",
            "step": "Component Multiply 21",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1512",
            "positionY": "-658"
        },
        {
            "type": "step",
            "step": "Component Multiply 22",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "896",
            "positionY": "-490"
        },
        {
            "type": "step",
            "step": "Component Multiply 23",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "896",
            "positionY": "-420"
        },
        {
            "type": "step",
            "step": "Component Multiply 24",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "896",
            "positionY": "-350"
        },
        {
            "type": "step",
            "step": "Component Multiply 25",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1218",
            "positionY": "-378"
        },
        {
            "type": "step",
            "step": "Component Multiply 26",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1512",
            "positionY": "-406"
        },
        {
            "type": "step",
            "step": "Component Multiply 27",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "896",
            "positionY": "-238"
        },
        {
            "type": "step",
            "step": "Component Multiply 28",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "896",
            "positionY": "-168"
        },
        {
            "type": "step",
            "step": "Component Multiply 29",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "896",
            "positionY": "-98"
        },
        {
            "type": "step",
            "step": "Component Multiply 3",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "896",
            "positionY": "-1428"
        },
        {
            "type": "step",
            "step": "Component Multiply 30",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1218",
            "positionY": "-126"
        },
        {
            "type": "step",
            "step": "Component Multiply 31",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1512",
            "positionY": "-154"
        },
        {
            "type": "step",
            "step": "Component Multiply 32",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1008",
            "positionY": "-28"
        },
        {
            "type": "step",
            "step": "Component Multiply 4",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "896",
            "positionY": "-1358"
        },
        {
            "type": "step",
            "step": "Component Multiply 5",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1512",
            "positionY": "-1414"
        },
        {
            "type": "step",
            "step": "Component Multiply 6",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "896",
            "positionY": "-1246"
        },
        {
            "type": "step",
            "step": "Component Multiply 7",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "896",
            "positionY": "-1176"
        },
        {
            "type": "step",
            "step": "Component Multiply 8",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "896",
            "positionY": "-1106"
        },
        {
            "type": "step",
            "step": "Component Multiply 9",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1512",
            "positionY": "-1162"
        },
        {
            "type": "step",
            "step": "Convolution",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-210",
            "positionY": "1372"
        },
        {
            "type": "step",
            "step": "Convolution 2",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-3276",
            "positionY": "1050"
        },
        {
            "type": "step",
            "step": "Distance-Matching-Field",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-3346",
            "positionY": "1064"
        },
        {
            "type": "step",
            "step": "Distance-matching-Field",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-3206",
            "positionY": "1050"
        },
        {
            "type": "step",
            "step": "Exploration-Boost",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1582",
            "positionY": "-546"
        },
        {
            "type": "step",
            "step": "Exploration-Goal-Node",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-1526",
            "positionY": "-434"
        },
        {
            "type": "step",
            "step": "Goal-Boost",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1246",
            "positionY": "-434"
        },
        {
            "type": "step",
            "step": "Goal-Directed-Mode",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1232",
            "positionY": "-546"
        },
        {
            "type": "step",
            "step": "Hopf Oscillator RHS",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1862",
            "positionY": "798"
        },
        {
            "type": "step",
            "step": "Hopf Oscillator RHS 2",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1862",
            "positionY": "1008"
        },
        {
            "type": "step",
            "step": "Hopf Oscillator RHS 3",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1862",
            "positionY": "1218"
        },
        {
            "type": "step",
            "step": "Intention In Action-Action1",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-2002",
            "positionY": "728"
        },
        {
            "type": "step",
            "step": "Intention In Action-Action2",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-2002",
            "positionY": "938"
        },
        {
            "type": "step",
            "step": "Intention In Action-Break",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-2604",
            "positionY": "952"
        },
        {
            "type": "step",
            "step": "Intention In Action-Orient To Object",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-3948",
            "positionY": "952"
        },
        {
            "type": "step",
            "step": "Intention-In-Action-Node6",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-2002",
            "positionY": "1148"
        },
        {
            "type": "step",
            "step": "Matrix Type Converter",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-588",
            "positionY": "1372"
        },
        {
            "type": "step",
            "step": "Microphone TCP Reader",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "168",
            "positionY": "1372"
        },
        {
            "type": "step",
            "step": "Motor-Attractor",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-3752",
            "positionY": "1106"
        },
        {
            "type": "step",
            "step": "Norm",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1638",
            "positionY": "798"
        },
        {
            "type": "step",
            "step": "Norm 2",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1638",
            "positionY": "1218"
        },
        {
            "type": "step",
            "step": "Norm 3",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1638",
            "positionY": "1008"
        },
        {
            "type": "step",
            "step": "Numerical Integration",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-1792",
            "positionY": "798"
        },
        {
            "type": "step",
            "step": "Numerical Integration 2",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-1792",
            "positionY": "1008"
        },
        {
            "type": "step",
            "step": "Numerical Integration 3",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-1792",
            "positionY": "1218"
        },
        {
            "type": "step",
            "step": "Precondition-Break In Front Of Object",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-2226",
            "positionY": "924"
        },
        {
            "type": "step",
            "step": "Precondition-Color In Attention",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-4144",
            "positionY": "924"
        },
        {
            "type": "step",
            "step": "Precondition-Is In Front Of",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-2800",
            "positionY": "924"
        },
        {
            "type": "step",
            "step": "Precondition-Oriented To Object",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-3276",
            "positionY": "924"
        },
        {
            "type": "step",
            "step": "Projection",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-126",
            "positionY": "1372"
        },
        {
            "type": "step",
            "step": "Projection 10",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-3052",
            "positionY": "1050"
        },
        {
            "type": "step",
            "step": "Projection 11",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "280",
            "positionY": "-1680"
        },
        {
            "type": "step",
            "step": "Projection 12",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "280",
            "positionY": "-1638"
        },
        {
            "type": "step",
            "step": "Projection 13",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "280",
            "positionY": "-1596"
        },
        {
            "type": "step",
            "step": "Projection 14",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1036",
            "positionY": "-406"
        },
        {
            "type": "step",
            "step": "Projection 2",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "154",
            "positionY": "924"
        },
        {
            "type": "step",
            "step": "Projection 3",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "784",
            "positionY": "182"
        },
        {
            "type": "step",
            "step": "Projection 4",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1078",
            "positionY": "210"
        },
        {
            "type": "step",
            "step": "Projection 5",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "546",
            "positionY": "182"
        },
        {
            "type": "step",
            "step": "Projection 6",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-4396",
            "positionY": "966"
        },
        {
            "type": "step",
            "step": "Projection 7",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-4144",
            "positionY": "1106"
        },
        {
            "type": "step",
            "step": "Projection 8",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-3948",
            "positionY": "1064"
        },
        {
            "type": "step",
            "step": "Projection 9",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-3528",
            "positionY": "966"
        },
        {
            "type": "step",
            "step": "Rate Matrix To Space Code",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-392",
            "positionY": "1372"
        },
        {
            "type": "step",
            "step": "Recruitment Boost",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "798",
            "positionY": "-14"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "1722",
            "positionY": "-1428"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 10",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "672",
            "positionY": "-630"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 11",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "672",
            "positionY": "-952"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 12",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "672",
            "positionY": "-882"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 13",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "672",
            "positionY": "-1022"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 14",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "672",
            "positionY": "-1134"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 15",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "672",
            "positionY": "-1274"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 16",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "672",
            "positionY": "-1526"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 17",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "672",
            "positionY": "-1386"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 18",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "672",
            "positionY": "-1456"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 19",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "672",
            "positionY": "-266"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 2",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "672",
            "positionY": "-196"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 20",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "1722",
            "positionY": "-1176"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 21",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "1722",
            "positionY": "-924"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 22",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "1722",
            "positionY": "-672"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 23",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "1722",
            "positionY": "-420"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 24",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "1722",
            "positionY": "-168"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 3",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "672",
            "positionY": "-126"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 4",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "672",
            "positionY": "-518"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 5",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "672",
            "positionY": "-448"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 6",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "672",
            "positionY": "-378"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 7",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "672",
            "positionY": "-770"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 8",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "672",
            "positionY": "-700"
        },
        {
            "type": "step",
            "step": "Reward Hebb Trace 9",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "672",
            "positionY": "-1204"
        },
        {
            "type": "step",
            "step": "Reward-Node",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "532",
            "positionY": "-14"
        },
        {
            "type": "step",
            "step": "Scalars To Vector",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1022",
            "positionY": "994"
        },
        {
            "type": "step",
            "step": "Scalars To Vector 2",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1484",
            "positionY": "-42"
        },
        {
            "type": "step",
            "step": "Scalars To Vector 3",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "476",
            "positionY": "1246"
        },
        {
            "type": "step",
            "step": "Scalars To Vector 4",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1288",
            "positionY": "784"
        },
        {
            "type": "step",
            "step": "Scalars To Vector 5",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1288",
            "positionY": "994"
        },
        {
            "type": "step",
            "step": "Scalars To Vector 6",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1288",
            "positionY": "1204"
        },
        {
            "type": "step",
            "step": "Sound-Action-Field",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-1386",
            "positionY": "-182"
        },
        {
            "type": "step",
            "step": "Sound-Attention-Field",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "504",
            "positionY": "546"
        },
        {
            "type": "step",
            "step": "Sound-Change-Detection",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "644",
            "positionY": "224"
        },
        {
            "type": "step",
            "step": "Sound-Change-Inhibition",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "644",
            "positionY": "280"
        },
        {
            "type": "step",
            "step": "Sound-Goal-Field",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-1176",
            "positionY": "-434"
        },
        {
            "type": "step",
            "step": "Sound-Perception",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "308",
            "positionY": "966"
        },
        {
            "type": "step",
            "step": "Sound-Role-Field",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "140",
            "positionY": "-812"
        },
        {
            "type": "step",
            "step": "Space To Rate Code",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-3752",
            "positionY": "1162"
        },
        {
            "type": "step",
            "step": "Space-Action-Field",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-3724",
            "positionY": "994"
        },
        {
            "type": "step",
            "step": "Space-Attention-Field",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-3892",
            "positionY": "1050"
        },
        {
            "type": "step",
            "step": "Space-matching-Field",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-3668",
            "positionY": "980"
        },
        {
            "type": "step",
            "step": "Static Gain",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-308",
            "positionY": "1372"
        },
        {
            "type": "step",
            "step": "Static Gain 10",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-4004",
            "positionY": "938"
        },
        {
            "type": "step",
            "step": "Static Gain 11",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-3332",
            "positionY": "938"
        },
        {
            "type": "step",
            "step": "Static Gain 12",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-3136",
            "positionY": "938"
        },
        {
            "type": "step",
            "step": "Static Gain 13",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-2856",
            "positionY": "938"
        },
        {
            "type": "step",
            "step": "Static Gain 14",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-2660",
            "positionY": "938"
        },
        {
            "type": "step",
            "step": "Static Gain 15",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1442",
            "positionY": "1134"
        },
        {
            "type": "step",
            "step": "Static Gain 16",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-2282",
            "positionY": "938"
        },
        {
            "type": "step",
            "step": "Static Gain 17",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-2086",
            "positionY": "938"
        },
        {
            "type": "step",
            "step": "Static Gain 18",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "882",
            "positionY": "546"
        },
        {
            "type": "step",
            "step": "Static Gain 19",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "798",
            "positionY": "280"
        },
        {
            "type": "step",
            "step": "Static Gain 2",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1092",
            "positionY": "280"
        },
        {
            "type": "step",
            "step": "Static Gain 20",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1218",
            "positionY": "784"
        },
        {
            "type": "step",
            "step": "Static Gain 21",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1218",
            "positionY": "994"
        },
        {
            "type": "step",
            "step": "Static Gain 22",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1218",
            "positionY": "1204"
        },
        {
            "type": "step",
            "step": "Static Gain 23",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "560",
            "positionY": "280"
        },
        {
            "type": "step",
            "step": "Static Gain 24",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1274",
            "positionY": "-112"
        },
        {
            "type": "step",
            "step": "Static Gain 25",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1582",
            "positionY": "-154"
        },
        {
            "type": "step",
            "step": "Static Gain 26",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1274",
            "positionY": "-616"
        },
        {
            "type": "step",
            "step": "Static Gain 27",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1582",
            "positionY": "-658"
        },
        {
            "type": "step",
            "step": "Static Gain 28",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1274",
            "positionY": "-868"
        },
        {
            "type": "step",
            "step": "Static Gain 29",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1582",
            "positionY": "-910"
        },
        {
            "type": "step",
            "step": "Static Gain 3",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1274",
            "positionY": "-364"
        },
        {
            "type": "step",
            "step": "Static Gain 30",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1274",
            "positionY": "-1372"
        },
        {
            "type": "step",
            "step": "Static Gain 31",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1582",
            "positionY": "-1162"
        },
        {
            "type": "step",
            "step": "Static Gain 32",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1582",
            "positionY": "-1414"
        },
        {
            "type": "step",
            "step": "Static Gain 33",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1274",
            "positionY": "-1120"
        },
        {
            "type": "step",
            "step": "Static Gain 34",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1008",
            "positionY": "-1638"
        },
        {
            "type": "step",
            "step": "Static Gain 35",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "602",
            "positionY": "-1372"
        },
        {
            "type": "step",
            "step": "Static Gain 36",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "602",
            "positionY": "-1442"
        },
        {
            "type": "step",
            "step": "Static Gain 37",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "602",
            "positionY": "-1512"
        },
        {
            "type": "step",
            "step": "Static Gain 38",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "602",
            "positionY": "-1260"
        },
        {
            "type": "step",
            "step": "Static Gain 39",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "602",
            "positionY": "-1190"
        },
        {
            "type": "step",
            "step": "Static Gain 4",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1582",
            "positionY": "-406"
        },
        {
            "type": "step",
            "step": "Static Gain 40",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "602",
            "positionY": "-1120"
        },
        {
            "type": "step",
            "step": "Static Gain 41",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "602",
            "positionY": "-1008"
        },
        {
            "type": "step",
            "step": "Static Gain 42",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "602",
            "positionY": "-938"
        },
        {
            "type": "step",
            "step": "Static Gain 43",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "602",
            "positionY": "-868"
        },
        {
            "type": "step",
            "step": "Static Gain 44",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "602",
            "positionY": "-756"
        },
        {
            "type": "step",
            "step": "Static Gain 45",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "602",
            "positionY": "-686"
        },
        {
            "type": "step",
            "step": "Static Gain 46",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "602",
            "positionY": "-616"
        },
        {
            "type": "step",
            "step": "Static Gain 47",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "602",
            "positionY": "-504"
        },
        {
            "type": "step",
            "step": "Static Gain 48",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "602",
            "positionY": "-434"
        },
        {
            "type": "step",
            "step": "Static Gain 49",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "602",
            "positionY": "-364"
        },
        {
            "type": "step",
            "step": "Static Gain 5",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "448",
            "positionY": "574"
        },
        {
            "type": "step",
            "step": "Static Gain 50",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "602",
            "positionY": "-252"
        },
        {
            "type": "step",
            "step": "Static Gain 51",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "602",
            "positionY": "-182"
        },
        {
            "type": "step",
            "step": "Static Gain 52",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "602",
            "positionY": "-112"
        },
        {
            "type": "step",
            "step": "Static Gain 53",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1218",
            "positionY": "-1428"
        },
        {
            "type": "step",
            "step": "Static Gain 54",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1218",
            "positionY": "-1176"
        },
        {
            "type": "step",
            "step": "Static Gain 55",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1218",
            "positionY": "-924"
        },
        {
            "type": "step",
            "step": "Static Gain 56",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1218",
            "positionY": "-672"
        },
        {
            "type": "step",
            "step": "Static Gain 57",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1218",
            "positionY": "-420"
        },
        {
            "type": "step",
            "step": "Static Gain 58",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1218",
            "positionY": "-168"
        },
        {
            "type": "step",
            "step": "Static Gain 59",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1316",
            "positionY": "-14"
        },
        {
            "type": "step",
            "step": "Static Gain 6",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "672",
            "positionY": "574"
        },
        {
            "type": "step",
            "step": "Static Gain 60",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "952",
            "positionY": "-14"
        },
        {
            "type": "step",
            "step": "Static Gain 61",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1876",
            "positionY": "-1428"
        },
        {
            "type": "step",
            "step": "Static Gain 62",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1876",
            "positionY": "-1176"
        },
        {
            "type": "step",
            "step": "Static Gain 63",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1876",
            "positionY": "-924"
        },
        {
            "type": "step",
            "step": "Static Gain 64",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1876",
            "positionY": "-672"
        },
        {
            "type": "step",
            "step": "Static Gain 65",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1876",
            "positionY": "-420"
        },
        {
            "type": "step",
            "step": "Static Gain 66",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1876",
            "positionY": "-168"
        },
        {
            "type": "step",
            "step": "Static Gain 67",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-966",
            "positionY": "-406"
        },
        {
            "type": "step",
            "step": "Static Gain 68",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "210",
            "positionY": "588"
        },
        {
            "type": "step",
            "step": "Static Gain 7",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1428",
            "positionY": "728"
        },
        {
            "type": "step",
            "step": "Static Gain 8",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1442",
            "positionY": "924"
        },
        {
            "type": "step",
            "step": "Static Gain 9",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-4200",
            "positionY": "938"
        },
        {
            "type": "step",
            "step": "TCP-Break-Writer",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-2464",
            "positionY": "1176"
        },
        {
            "type": "step",
            "step": "TCP-LED-Writer",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-952",
            "positionY": "994"
        },
        {
            "type": "step",
            "step": "TCP-Motor-Writer",
            "display style": "ICON_AND_TEXT",
            "width": "124",
            "height": "40",
            "positionX": "-3612",
            "positionY": "1176"
        },
        {
            "type": "step",
            "step": "Transfer Function",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "210",
            "positionY": "630"
        },
        {
            "type": "step",
            "step": "Transfer Function 10",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "826",
            "positionY": "-1246"
        },
        {
            "type": "step",
            "step": "Transfer Function 11",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "826",
            "positionY": "-1176"
        },
        {
            "type": "step",
            "step": "Transfer Function 12",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "826",
            "positionY": "-1106"
        },
        {
            "type": "step",
            "step": "Transfer Function 14",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "826",
            "positionY": "-994"
        },
        {
            "type": "step",
            "step": "Transfer Function 15",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "826",
            "positionY": "-924"
        },
        {
            "type": "step",
            "step": "Transfer Function 16",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "826",
            "positionY": "-854"
        },
        {
            "type": "step",
            "step": "Transfer Function 18",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "826",
            "positionY": "-742"
        },
        {
            "type": "step",
            "step": "Transfer Function 19",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "826",
            "positionY": "-672"
        },
        {
            "type": "step",
            "step": "Transfer Function 20",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "826",
            "positionY": "-602"
        },
        {
            "type": "step",
            "step": "Transfer Function 22",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "826",
            "positionY": "-490"
        },
        {
            "type": "step",
            "step": "Transfer Function 23",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "826",
            "positionY": "-420"
        },
        {
            "type": "step",
            "step": "Transfer Function 24",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "826",
            "positionY": "-350"
        },
        {
            "type": "step",
            "step": "Transfer Function 26",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "826",
            "positionY": "-238"
        },
        {
            "type": "step",
            "step": "Transfer Function 27",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "826",
            "positionY": "-168"
        },
        {
            "type": "step",
            "step": "Transfer Function 28",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "826",
            "positionY": "-98"
        },
        {
            "type": "step",
            "step": "Transfer Function 3",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-42",
            "positionY": "1372"
        },
        {
            "type": "step",
            "step": "Transfer Function 7",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "826",
            "positionY": "-1498"
        },
        {
            "type": "step",
            "step": "Transfer Function 8",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "826",
            "positionY": "-1428"
        },
        {
            "type": "step",
            "step": "Transfer Function 9",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "826",
            "positionY": "-1358"
        },
        {
            "type": "step",
            "step": "Vector To Scalars",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "-1848",
            "positionY": "210"
        },
        {
            "type": "trigger",
            "trigger": "default thread",
            "width": "30",
            "height": "30",
            "positionX": "0",
            "positionY": "0"
        },
        {
            "type": "step",
            "step": "dx",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "784",
            "positionY": "-1764"
        },
        {
            "type": "step",
            "step": "j",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1162",
            "positionY": "-1764"
        },
        {
            "type": "step",
            "step": "k",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "770",
            "positionY": "-1638"
        },
        {
            "type": "step",
            "step": "sum",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "840",
            "positionY": "-1722"
        },
        {
            "type": "step",
            "step": "x",
            "display style": "ICON_ONLY",
            "width": "40",
            "height": "40",
            "positionX": "1456",
            "positionY": "-1722"
        }
    ],
    "ui view": {
        "ScrollBarX": "-968",
        "ScrollBarY": "-175",
        "SliderPosX": "-968",
        "SliderPosY": "-175",
        "Zoom": "0.23999999999999999"
    },
    "ui generic": {
        "group": "element",
        "open plots": "",
        "plot groups": "",
        "architecture widgets": "",
        "robots": "",
        "width": "250",
        "height": "250",
        "smart mode": "false",
        "collapsed": "false",
        "lock geometry": "false",
        "uncollapsed width": "250",
        "uncollapsed height": "250",
        "positionX": "0",
        "positionY": "0"
    }
}
